{"ast":null,"code":"//FIREBASE CONFIG//\nimport firebase from 'firebase';\nimport 'firebase/firestore';\nvar firebaseConfig = {\n  apiKey: process.env.REACT_APP_apiKey,\n  authDomain: process.env.REACT_APP_authDomain,\n  projectId: process.env.REACT_APP_projectId,\n  storageBucket: process.env.REACT_APP_storageBucket,\n  messagingSenderId: process.env.REACT_APP_messagingSenderId,\n  appId: process.env.REACT_APP_appId,\n  measurementId: process.env.REACT_APP_measurementId\n};\nfirebase.initializeApp(firebaseConfig); //DATABASE INIT\n\nconst firestore = firebase.firestore();\nconst chatroomsDB = firestore.collection('chatrooms');\nconst usersDB = firestore.collection('users'); //const messagesRef = firestore.collection('messages');\n//Functional groups\n\nclass FirebaseUtil {\n  static async doUserCheckIn() {\n    if (!localStorage.getItem(\"user-token\")) {\n      let userID = await usersDB.add({\n        name: \"none\",\n        type: \"annon\"\n      }).then(res => {\n        return localStorage.setItem(\"user-token\", res.id);\n      });\n      return userID;\n    } else {\n      return localStorage.getItem(\"user-token\");\n    }\n  }\n\n  static async createRoom(userName, adminId, roomName) {\n    const apiCompletionPromise = chatroomsDB.add({\n      admin: userName,\n      adminId: adminId,\n      roomName: roomName\n    });\n    return apiCompletionPromise;\n  }\n\n}\n\nexport { FirebaseUtil };","map":{"version":3,"sources":["/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/FirebaseUtil/FirebaseUtil.js"],"names":["firebase","firebaseConfig","apiKey","process","env","REACT_APP_apiKey","authDomain","REACT_APP_authDomain","projectId","REACT_APP_projectId","storageBucket","REACT_APP_storageBucket","messagingSenderId","REACT_APP_messagingSenderId","appId","REACT_APP_appId","measurementId","REACT_APP_measurementId","initializeApp","firestore","chatroomsDB","collection","usersDB","FirebaseUtil","doUserCheckIn","localStorage","getItem","userID","add","name","type","then","res","setItem","id","createRoom","userName","adminId","roomName","apiCompletionPromise","admin"],"mappings":"AACA;AACA,OAAOA,QAAP,MAAqB,UAArB;AACA,OAAO,oBAAP;AAGA,IAAIC,cAAc,GAAG;AACjBC,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADH;AAEjBC,EAAAA,UAAU,EAAEH,OAAO,CAACC,GAAR,CAAYG,oBAFP;AAGjBC,EAAAA,SAAS,EAAEL,OAAO,CAACC,GAAR,CAAYK,mBAHN;AAIjBC,EAAAA,aAAa,EAAEP,OAAO,CAACC,GAAR,CAAYO,uBAJV;AAKjBC,EAAAA,iBAAiB,EAAET,OAAO,CAACC,GAAR,CAAYS,2BALd;AAMjBC,EAAAA,KAAK,EAAEX,OAAO,CAACC,GAAR,CAAYW,eANF;AAOjBC,EAAAA,aAAa,EAAEb,OAAO,CAACC,GAAR,CAAYa;AAPV,CAArB;AAUAjB,QAAQ,CAACkB,aAAT,CAAuBjB,cAAvB,E,CAGA;;AACA,MAAMkB,SAAS,GAAGnB,QAAQ,CAACmB,SAAT,EAAlB;AACA,MAAMC,WAAW,GAAGD,SAAS,CAACE,UAAV,CAAqB,WAArB,CAApB;AACA,MAAMC,OAAO,GAAGH,SAAS,CAACE,UAAV,CAAqB,OAArB,CAAhB,C,CACA;AAGA;;AACA,MAAME,YAAN,CAAoB;AAEW,eAAbC,aAAa,GAAE;AAEvB,QAAG,CAACC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAJ,EAAuC;AAEnC,UAAIC,MAAM,GAAG,MAAML,OAAO,CAACM,GAAR,CAAY;AAC3BC,QAAAA,IAAI,EAAE,MADqB;AAE3BC,QAAAA,IAAI,EAAE;AAFqB,OAAZ,EAGhBC,IAHgB,CAGXC,GAAG,IAAG;AACV,eAAOP,YAAY,CAACQ,OAAb,CAAqB,YAArB,EAAmCD,GAAG,CAACE,EAAvC,CAAP;AACH,OALkB,CAAnB;AAOA,aAAOP,MAAP;AAEH,KAXD,MAWK;AACD,aAAOF,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAP;AACH;AACN;;AAEsB,eAAVS,UAAU,CAACC,QAAD,EAAWC,OAAX,EAAoBC,QAApB,EAA6B;AAGhD,UAAMC,oBAAoB,GAAGnB,WAAW,CAACQ,GAAZ,CAAgB;AACzCY,MAAAA,KAAK,EAAEJ,QADkC;AAEzCC,MAAAA,OAAO,EAAEA,OAFgC;AAGzCC,MAAAA,QAAQ,EAAEA;AAH+B,KAAhB,CAA7B;AAMA,WAAOC,oBAAP;AAEL;;AA/BiB;;AAsCpB,SACIhB,YADJ","sourcesContent":["\n//FIREBASE CONFIG//\nimport firebase from 'firebase';\nimport 'firebase/firestore';\n\n\nvar firebaseConfig = {\n    apiKey: process.env.REACT_APP_apiKey,\n    authDomain: process.env.REACT_APP_authDomain,\n    projectId: process.env.REACT_APP_projectId,\n    storageBucket: process.env.REACT_APP_storageBucket,\n    messagingSenderId: process.env.REACT_APP_messagingSenderId,\n    appId: process.env.REACT_APP_appId,\n    measurementId: process.env.REACT_APP_measurementId\n};\n  \nfirebase.initializeApp(firebaseConfig)\n\n\n//DATABASE INIT\nconst firestore = firebase.firestore();\nconst chatroomsDB = firestore.collection('chatrooms');\nconst usersDB = firestore.collection('users');\n//const messagesRef = firestore.collection('messages');\n\n\n//Functional groups\nclass FirebaseUtil  {\n\n     static async doUserCheckIn(){\n\n          if(!localStorage.getItem(\"user-token\")){\n  \n              let userID = await usersDB.add({\n                  name: \"none\",\n                  type: \"annon\"\n              }).then(res =>{\n                  return localStorage.setItem(\"user-token\", res.id)\n              })\n\n              return userID\n\n          }else{\n              return localStorage.getItem(\"user-token\");\n          }\n    }\n\n    static async createRoom(userName, adminId, roomName){\n\n      \n        const apiCompletionPromise = chatroomsDB.add({\n            admin: userName,\n            adminId: adminId,\n            roomName: roomName\n        })\n\n        return apiCompletionPromise\n\n  }\n\n\n\n}\n\n\nexport {\n    FirebaseUtil\n}\n\n"]},"metadata":{},"sourceType":"module"}