{"ast":null,"code":"var _jsxFileName = \"/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Chatroom/ChatRoom.js\";\nimport './Chatroom.css';\nimport { withRouter } from 'react-router-dom';\nimport React from 'react';\nimport io from 'socket.io-client';\nimport autosize from \"autosize\";\nimport ChatMessage from './ChatMessage';\nimport SocketManager from './Socket';\nimport Message from '../Models/MessageModel';\nimport { FaTelegramPlane } from \"react-icons/fa\";\nimport { Modal, Button } from 'antd';\nimport { UserService } from '../FirebaseUtil/UserService';\nimport { FirebaseUtil } from '../FirebaseUtil/FirebaseUtil'; // \"bnh5yzdirjinqaorq0ox1tf383nb3xr\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Chat extends React.Component {\n  constructor(props) {\n    super(props);\n    /*  let redirect = false;\n      try{\n          let searchString = props.history.location.search.substring(1).split('&')\n          let queryParams = {}\n          let pair = []\n          for(var i=0;i<searchString.length;i++){\n              pair = searchString.split('=')\n              queryParams[pair[0]] = pair[1]\n          }\n      }catch(err){\n          console.log(\"query param err: \", err)\n          redirect = true;\n      }*/\n\n    /*FirebaseUtil.findRoom(roomCode).then(doc =>{\n        console.log(doc.data())\n    })*/\n\n    console.log(\"location: \", props.location.state.room);\n    this.socket = null;\n    this.MaxMessageLength = 140;\n\n    if (!props.data.room) {\n      props.history.push(\"/\");\n      return;\n    }\n\n    console.log(\"location: \", props.location.state.room);\n    let room_ = props.location.state.room; //new Room(\"25\", \"love isalnd ❤️\", \"kit\")//props.data.room\n\n    let user_ = props.data.user; //{userName: props.data.user.userName} //props.data.user_\n\n    let isAdmin_ = room_ ? room_.admin === UserService.token() ? true : false : null; //==\n\n    let token_ = props.data.persistentToken ? props.data.persistentToken : null;\n    console.log(\"token is: \", token_);\n    this.textarea = /*#__PURE__*/_jsxDEV(\"textarea\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 29\n    }, this);\n    this.removeMessage = this.removeMessage.bind(this);\n    this.onAddReaction = this.onAddReaction.bind(this);\n    this.showMessageOptions = this.showMessageOptions.bind(this);\n    this.state = {\n      room: room_,\n      user: user_,\n      isAdmin: isAdmin_,\n      newMessage: \"\",\n      messages: [],\n      status: \"loading\",\n      messageOptionsIsVisible: false\n    }; // if(!this.state.room)this.props.history.push(\"/\")\n\n    console.log(UserService.token(), this.state.room);\n  }\n\n  componentDidMount() {\n    if (!this.props.data.room) {\n      this.props.history.push(\"/\");\n      return;\n    } //if(!this.state.room)this.props.history.push(\"/\")\n\n\n    if (true) {\n      this.connectSocket();\n      this.socketEvents();\n    } //http://localhost:3000/chat?=Yu9uIlEncb8flTfFxv14.focus();\n\n\n    autosize(this.textarea);\n  }\n\n  connectSocket() {\n    this.socket = io(\"http://192.168.1.9:1234\", {\n      transport: ['websocket']\n    });\n  }\n\n  set(field, value) {\n    this.setState({\n      [field]: value\n    });\n  }\n\n  socketEvents() {\n    //socket functions\n    this.socket.on('connect', connection => {\n      if (this.state.isAdmin) {\n        SocketManager.createRoom(this);\n      } else {\n        this.socket.emit('join-room', this.state.room.roomCode, this.props.data.persistentToken);\n      }\n\n      console.log(\"connected.\");\n      this.socket.on('generated-user-token', tkn => {\n        this.props.data.persistentToken = tkn;\n        localStorage.setItem(\"persistentToken\", tkn);\n        console.log(\"new token generated: \", tkn);\n      });\n      this.socket.on('backlog-messages', messages_ => {\n        this.set(\"messages\", messages_);\n        this.set(\"status\", \"loaded\");\n        console.log(\"backlog: \", messages_);\n      });\n      this.socket.on('broadcasted-message', message => {\n        this.set(\"messages\", [...this.state.messages, message]);\n      });\n      this.socket.on('room-ended', () => {\n        console.log(\"room ended. \");\n        this.socket.close();\n        this.detachFromRoom();\n      });\n      this.socket.on('removed-message', messages_ => {\n        this.set(\"messages\", messages_);\n        console.log(\"messages updated: \", messages_);\n      });\n      this.socket.on('update-message', messages_ => {\n        this.set(\"messages\", messages_);\n        console.log(\"messages updated: \", messages_);\n      });\n      this.socket.on('find-and-ban-user', token => {\n        console.log(\"user has been banned.\");\n        console.log(token === this.props.data.persistentToken);\n        console.log(token, this.props.data.persistentToken);\n\n        if (token === this.props.data.persistentToken) {\n          this.detachFromRoom();\n          this.set(\"status\", \"banned\");\n        }\n      });\n    });\n  }\n\n  setValue(setter, event) {\n    this.set(setter, event.target.value);\n  }\n\n  updateNewMessage(event) {\n    console.log(event.target.value, event.target.value.length, event.target.value.substring(0, this.MaxMessageLength));\n    if (event.target.value.length > this.MaxMessageLength) return this.set(\"newMessage\", event.target.value.substring(0, this.MaxMessageLength));\n    this.set(\"newMessage\", event.target.value);\n  }\n\n  sendMessage() {\n    let msg = new Message(this.state.room.roomCode, this.state.newMessage, this.state.user.userName, UserService.token()); //this.socket.emit(\"broadcast-message\", this.state.room.roomCode, this.state.newMessage, this.state.user.userName, this.props.data.persistentToken)\n\n    this.socket.emit(\"broadcast-message\", this.state.room.roomCode, msg);\n    this.set(\"newMessage\", \"\");\n  }\n\n  endRoom() {\n    this.socket.emit(\"end-room\", this.state.room.roomCode);\n    this.detachFromRoom();\n  }\n\n  detachFromRoom() {\n    this.set(\"room\", null);\n    this.socket.close();\n    this.socket = null;\n    this.set(\"status\", \"closed\");\n  }\n\n  leaveRoom() {\n    this.socket.emit(\"leave-room\", this.roomCode);\n    this.detachFromRoom();\n    this.props.history.push(\"/\");\n  }\n\n  removeUser(msg) {}\n\n  exitClosedRoom() {\n    this.props.history.push(\"/\");\n  }\n\n  removeMessage(msg) {\n    alert(\"user will be banned\");\n    console.log(msg, this.state.room.roomCode, msg);\n    this.socket.emit(\"ban-user\", this.state.room.roomCode, msg);\n  }\n\n  onAddReaction(emoji, msg) {\n    this.socket.emit(\"add-reaction\", this.state.room.roomCode, msg, emoji);\n  }\n\n  closeMessageOptions() {\n    this.setState({\n      messageOptionsIsVisible: false\n    });\n  }\n\n  showMessageOptions(msg) {\n    console.log(msg);\n    this.setState({\n      messageOptionsIsVisible: true\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"page-root chatroom-root\",\n      children: this.props.data.room ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" \", this.state.room && this.state.status !== \"closed\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"chatroom-view\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"title-view\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              class: \"title-text\",\n              children: this.state.room.roomName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 21\n            }, this), this.state.room.admin == UserService.token() ? /*#__PURE__*/_jsxDEV(\"span\", {\n              class: \"leave-text\",\n              children: \"end\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 25\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              class: \"leave-text\",\n              children: \"leave\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"chatroom-messages-view\",\n            children: this.state.messages ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: this.state.messages.map(msg => /*#__PURE__*/_jsxDEV(ChatMessage, {\n                onClick: () => this.showMessageOptions(msg),\n                onReportMessage: this.removeMessage,\n                message: msg,\n                text: msg.message,\n                userName: msg.userName,\n                reactions: msg.reactions,\n                onAddReaction: emoji => this.onAddReaction(emoji, msg),\n                isUser: UserService.token() === msg.userToken\n              }, msg.messageID, false, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 21\n            }, this) : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"typed-message-view\",\n            children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n              class: \"typed-message-input\",\n              ref: c => this.textarea = c,\n              rows: 3,\n              defaultValue: \"\",\n              value: this.state.newMessage,\n              onChange: this.updateNewMessage.bind(this),\n              class: \"typed-message-input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n              class: \"material-icons send-message-btn\",\n              onClick: this.sendMessage.bind(this),\n              children: /*#__PURE__*/_jsxDEV(FaTelegramPlane, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 311,\n                columnNumber: 26\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"character-count\",\n              children: [this.state.newMessage.length, \"/\", this.MaxMessageLength]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 17\n        }, this) : null, this.state.status === \"closed\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            class: \"title-leave-btn\",\n            onClick: this.exitClosedRoom.bind(this),\n            children: \"leave\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \" room is closed.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 13\n        }, this) : null, this.state.status === \"banned\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            class: \"title-leave-btn\",\n            onClick: this.exitClosedRoom.bind(this),\n            children: \"leave\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \" you've been removed.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 13\n        }, this) : null, /*#__PURE__*/_jsxDEV(Modal, {\n          width: \"80%\",\n          visible: this.state.messageOptionsIsVisible,\n          onCancel: this.closeMessageOptions.bind(this),\n          footer: null,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-info-modal\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              children: \" Remove User\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 34\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default _c = withRouter(Chat);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Chatroom/ChatRoom.js"],"names":["withRouter","React","io","autosize","ChatMessage","SocketManager","Message","FaTelegramPlane","Modal","Button","UserService","FirebaseUtil","Chat","Component","constructor","props","console","log","location","state","room","socket","MaxMessageLength","data","history","push","room_","user_","user","isAdmin_","admin","token","token_","persistentToken","textarea","removeMessage","bind","onAddReaction","showMessageOptions","isAdmin","newMessage","messages","status","messageOptionsIsVisible","componentDidMount","connectSocket","socketEvents","transport","set","field","value","setState","on","connection","createRoom","emit","roomCode","tkn","localStorage","setItem","messages_","message","close","detachFromRoom","setValue","setter","event","target","updateNewMessage","length","substring","sendMessage","msg","userName","endRoom","leaveRoom","removeUser","exitClosedRoom","alert","emoji","closeMessageOptions","render","roomName","map","reactions","userToken","messageID","c"],"mappings":"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","sourcesContent":["import './Chatroom.css';\nimport { withRouter} from 'react-router-dom';\n\nimport React from 'react';\nimport io from 'socket.io-client';\nimport autosize from \"autosize\";\n\n\n\nimport ChatMessage from './ChatMessage';\nimport SocketManager from './Socket'\nimport Message from '../Models/MessageModel'\n\nimport { FaTelegramPlane } from \"react-icons/fa\";\nimport { Modal, Button } from 'antd';\nimport { UserService } from '../FirebaseUtil/UserService';\nimport { FirebaseUtil } from '../FirebaseUtil/FirebaseUtil';\n\n\n\n\n\n\n\n// \"bnh5yzdirjinqaorq0ox1tf383nb3xr\"\n\nclass Chat extends React.Component{\n\n\n    constructor(props){\n\n        super(props)\n\n      /*  let redirect = false;\n        try{\n            let searchString = props.history.location.search.substring(1).split('&')\n            let queryParams = {}\n            let pair = []\n            for(var i=0;i<searchString.length;i++){\n                pair = searchString.split('=')\n                queryParams[pair[0]] = pair[1]\n            }\n        }catch(err){\n            console.log(\"query param err: \", err)\n            redirect = true;\n        }*/\n\n  \n        /*FirebaseUtil.findRoom(roomCode).then(doc =>{\n            console.log(doc.data())\n        })*/\n\n\n        console.log(\"location: \",props.location.state.room)\n\n            this.socket = null; \n            this.MaxMessageLength = 140;\n\n\n            if(!props.data.room){\n                props.history.push(\"/\")\n                return\n            }\n\n            console.log(\"location: \",props.location.state.room)\n\n            let room_ = props.location.state.room//new Room(\"25\", \"love isalnd ❤️\", \"kit\")//props.data.room\n            let user_ = props.data.user//{userName: props.data.user.userName} //props.data.user_\n            let isAdmin_ = room_ ?  (room_.admin === UserService.token()? true: false):null //==\n            let token_= props.data.persistentToken? props.data.persistentToken: null;\n            console.log(\"token is: \", token_)\n\n            this.textarea = <textarea/>\n            this.removeMessage =this.removeMessage.bind(this)\n            this.onAddReaction = this.onAddReaction.bind(this)\n            this.showMessageOptions = this.showMessageOptions.bind(this)\n\n            this.state ={\n                room: room_,\n                user: user_,\n                isAdmin: isAdmin_,\n                newMessage: \"\",\n                messages: [],\n                status: \"loading\",\n                messageOptionsIsVisible: false\n            }\n\n            // if(!this.state.room)this.props.history.push(\"/\")\n            console.log(UserService.token(), this.state.room)\n\n        \n    }\n\n    \n    componentDidMount(){\n\n        if(!this.props.data.room){\n            this.props.history.push(\"/\")\n            return\n       }\n\n        //if(!this.state.room)this.props.history.push(\"/\")\n        if(true){\n            this.connectSocket()\n            this.socketEvents()\n        }\n        //http://localhost:3000/chat?=Yu9uIlEncb8flTfFxv14.focus();\n        autosize(this.textarea);\n    }\n\n    connectSocket(){\n        this.socket = io(\"http://192.168.1.9:1234\", { transport: ['websocket']}) ;\n    }\n\n\n    set(field, value){\n        this.setState({[field]: value})\n    }\n\n    socketEvents(){\n\n        \n        //socket functions\n        this.socket.on('connect', (connection) => {\n           \n            if(this.state.isAdmin){\n                SocketManager.createRoom(this)\n            }else{\n                this.socket.emit('join-room', this.state.room.roomCode,  this.props.data.persistentToken)\n            }\n            console.log(\"connected.\")\n\n            this.socket.on('generated-user-token', (tkn) => {\n                this.props.data.persistentToken = tkn;\n                localStorage.setItem(\"persistentToken\", tkn)\n                console.log(\"new token generated: \",tkn)\n            });\n\n\n            this.socket.on('backlog-messages', (messages_) => {\n                this.set(\"messages\",messages_ )\n                this.set(\"status\", \"loaded\")\n                console.log(\"backlog: \", messages_)\n\n            });\n\n            this.socket.on('broadcasted-message', (message) => {\n                this.set(\"messages\", [...this.state.messages,message])\n            });\n\n            this.socket.on('room-ended', () => {\n                console.log(\"room ended. \")\n                this.socket.close()\n                this.detachFromRoom()\n            });\n\n            this.socket.on('removed-message', (messages_) => {\n                this.set(\"messages\",messages_ )\n                console.log(\"messages updated: \", messages_)\n            });\n\n            this.socket.on('update-message', (messages_) => {\n                this.set(\"messages\",messages_ )\n                console.log(\"messages updated: \", messages_)\n            });\n\n            this.socket.on('find-and-ban-user', (token) => {\n                console.log(\"user has been banned.\")\n                console.log(token === this.props.data.persistentToken)\n                console.log(token, this.props.data.persistentToken)\n\n                \n                if(token === this.props.data.persistentToken){\n                    this.detachFromRoom();\n                    this.set(\"status\",\"banned\" )\n\n                }\n            });\n\n        });\n\n   \n\n\n\n    }\n\n    setValue(setter, event){\n        this.set(setter, event.target.value)\n    }\n\n    updateNewMessage(event){\n\n        console.log(event.target.value, event.target.value.length, event.target.value.substring(0,this.MaxMessageLength))\n        if(event.target.value.length>this.MaxMessageLength)return this.set(\"newMessage\" ,event.target.value.substring(0,this.MaxMessageLength))\n        this.set(\"newMessage\" ,event.target.value)\n    }\n\n    sendMessage(){\n        let msg = new Message(this.state.room.roomCode, this.state.newMessage, this.state.user.userName, UserService.token())\n        //this.socket.emit(\"broadcast-message\", this.state.room.roomCode, this.state.newMessage, this.state.user.userName, this.props.data.persistentToken)\n        this.socket.emit(\"broadcast-message\", this.state.room.roomCode, msg)\n        this.set(\"newMessage\", \"\")\n    }\n\n    endRoom(){\n        this.socket.emit(\"end-room\", this.state.room.roomCode)\n        this.detachFromRoom()\n    }\n\n    detachFromRoom(){\n        this.set(\"room\",null)\n        this.socket.close()\n        this.socket = null;\n        this.set(\"status\", \"closed\")\n    }\n\n    leaveRoom(){\n        this.socket.emit(\"leave-room\", this.roomCode)\n        this.detachFromRoom();\n        this.props.history.push(\"/\")\n    }\n\n    removeUser(msg){\n       \n        \n    }\n    \n    exitClosedRoom(){\n        this.props.history.push(\"/\")\n    }\n\n    removeMessage(msg){\n        alert(\"user will be banned\")\n        console.log(msg,  this.state.room.roomCode, msg)\n        this.socket.emit(\"ban-user\", this.state.room.roomCode, msg)\n    }\n\n    onAddReaction(emoji, msg){\n        this.socket.emit(\"add-reaction\", this.state.room.roomCode, msg, emoji)\n    }\n\n    closeMessageOptions(){\n        this.setState({messageOptionsIsVisible: false})\n    }\n\n\n    showMessageOptions(msg){\n        console.log(msg)\n        this.setState({messageOptionsIsVisible: true})\n    }\n\n  \n    render(){\n\n        return (\n            <div class=\"page-root chatroom-root\">\n           {this.props.data.room?<div> {this.state.room && this.state.status !== \"closed\" ?\n                <div class=\"chatroom-view\">\n                \n                <div class=\"title-view\">\n     \n                    <span class=\"title-text\">{this.state.room.roomName}</span>\n                    {/*this.state.isAdmin?\n                        <p class=\"title-leave-btn\"  onClick={this.endRoom.bind(this)}>end room</p>:\n                        <p class=\"title-leave-btn\"  onClick={this.leaveRoom.bind(this)}>leave</p>\n                    */ }\n                   {this.state.room.admin == UserService.token()?\n                        <span class=\"leave-text\">end</span>:\n                        <span class=\"leave-text\">leave</span>\n                   }\n\n        \n                </div>\n              \n                <div class=\"chatroom-messages-view\">\n            \n                    {this.state.messages?\n                    <div>\n                        {this.state.messages.map(msg=> \n                        <ChatMessage \n                            onClick={()=> this.showMessageOptions(msg)} \n                            onReportMessage={this.removeMessage}\n                            message ={msg}\n                            key={msg.messageID} \n                            text={msg.message} \n                            userName={msg.userName } \n                            reactions = {msg.reactions}\n                            onAddReaction={(emoji=>this.onAddReaction(emoji, msg))}\n                            isUser={UserService.token()=== msg.userToken }/>)}\n                    </div>\n                        :null\n                    }\n        \n                    </div>\n\n                    <div class=\"typed-message-view\">\n                    <textarea\n                        class=\"typed-message-input\"\n                        ref={c => (this.textarea = c)}\n                        rows={3}\n                        defaultValue=\"\"\n                        value={this.state.newMessage} \n                        onChange={this.updateNewMessage.bind(this) }\n                        class=\"typed-message-input\"\n                        />\n       \n                     \n                        <i class=\"material-icons send-message-btn\" \n                            onClick={this.sendMessage.bind(this)}\n                        ><FaTelegramPlane/></i>\n                        <span className=\"character-count\">{this.state.newMessage.length}/{this.MaxMessageLength}</span>\n                    </div>\n        \n                </div>\n                :null\n            }\n\n            {this.state.status === \"closed\"?\n            <div>\n                <p class=\"title-leave-btn\"  onClick={this.exitClosedRoom.bind(this)}>leave</p>\n                <p> room is closed.</p>\n            </div>:\n                null\n            }\n\n            {this.state.status === \"banned\"?\n            <div>\n                <p class=\"title-leave-btn\"  onClick={this.exitClosedRoom.bind(this)}>leave</p>\n                <p> you've been removed.</p>\n            </div>:\n                null\n            }\n\n\n            <Modal  width=\"80%\" visible={this.state.messageOptionsIsVisible}  onCancel={this.closeMessageOptions.bind(this)} footer={null}>\n                <div className=\"message-info-modal\">\n                <button > Remove User</button>\n                </div>\n                \n            </Modal>\n\n\n\n\n\n            </div>:null}\n\n            </div>\n\n\n\n\n\n\n        );\n        \n    }\n    \n}\n\nexport default withRouter(Chat);\n"]},"metadata":{},"sourceType":"module"}