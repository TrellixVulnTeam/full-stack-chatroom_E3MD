{"ast":null,"code":"var _jsxFileName = \"/Users/kitan/Documents/CODING/group-chat-react-project/group-chat-react/src/Chatroom/ChatRoom.js\";\nimport './chatroom.css';\nimport Room from './RoomModel';\nimport Message from './MessageModel';\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport ChatMessage from './ChatMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Chat extends React.Component {\n  constructor(props) {\n    super(props);\n    this.socket = null;\n    let room_ = props.data.room; //new Room(\"25\", \"love isalnd ❤️\", \"kit\")//props.data.room\n\n    let user_ = props.data.user; //{userName: props.data.user.userName} //props.data.user_\n\n    let isAdmin_ = room_.admin == user_.userName ? true : false;\n    this.state = {\n      room: room_,\n      user: user_,\n      isAdmin: isAdmin_,\n      newMessage: \"\",\n      messages: [],\n      status: \"loading\"\n    };\n  }\n\n  componentDidMount() {\n    this.connectSocket();\n    this.socketEvents();\n  }\n\n  connectSocket() {\n    this.socket = io(\"http://192.168.1.9:3000\", {\n      transport: ['websocket']\n    });\n  }\n\n  set(field, value) {\n    this.setState({\n      [field]: value\n    });\n  }\n\n  socketEvents() {\n    //socket functions\n    this.socket.on('connect', connection => {\n      if (this.state.isAdmin) this.socket.emit('create-room', this.state.room.roomCode, this.state.room);else this.socket.emit('join-room', this.state.room.roomCode);\n      console.log(\"connected.\");\n      this.socket.on('backlog-messages', messages_ => {\n        this.set(\"messages\", messages_);\n        console.log(\"messages received: \", messages_);\n      });\n      this.socket.on('broadcasted-message', message => {\n        console.log(\"received: \", message);\n        console.log([...this.state.messages, message]);\n        this.set(\"messages\", [...this.state.messages, message]);\n        this.set(\"pending\", \"loaded\");\n      });\n    });\n  }\n\n  setValue(setter, event) {\n    this.set(setter, event.target.value);\n  }\n\n  updateNewMessage(event) {\n    this.set(\"newMessage\", event.target.value);\n  }\n\n  sendMessage() {\n    this.socket.emit(\"broadcast-message\", this.state.room.roomCode, this.state.newMessage, this.state.user.userName);\n    this.set(\"newMessage\", \"\");\n  }\n\n  endRoom() {\n    this.socket.emit(\"end-room\", roomCode);\n    this.set(\"status\", \"closed\");\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"root\",\n      children: this.state.room ? /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"chatroom-view\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"title-view\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            class: \"title-text\",\n            children: this.state.room.roomName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 21\n          }, this), this.state.isAdmin ? /*#__PURE__*/_jsxDEV(\"p\", {\n            class: \"title-leave-btn\",\n            children: \"end room\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 25\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            class: \"title-leave-btn\",\n            onClick: this.endRoom,\n            children: \"leave\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"chatroom-messages-view\",\n          children: this.state.messages ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: this.state.messages.map(msg => /*#__PURE__*/_jsxDEV(ChatMessage, {\n              text: msg.message,\n              userName: msg.userName,\n              isUser: this.state.user.userName == msg.userName\n            }, msg.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 56\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 21\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"typed-message-view\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: this.state.newMessage,\n            onChange: event => this.setValue(\"newMessage\", event),\n            class: \"typed-message-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n            class: \"material-icons send-message-btn\",\n            onClick: this.sendMessage.bind(this),\n            children: \"\\uE163\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Chat;\n/*\n\n\n      //let roomCode_ = localStorage.getItem(\"room-code\")\n        let isAdmin_ = localStorage.getItem('create-room')\n        let roomName_ = localStorage.getItem(\"room-name\")\n        let userName_ = localStorage.getItem(\"user-name\")\n        let room_ = {\n            name:roomName_,\n            admin: userName_,\n            password:\"xxx\",\n            code: roomCode_\n        }\n\n\n                <ChatMessage\n                text={\"Hi, Sweet! So, what do you wanna do today?Sweet! \"}\n                userName=\"name\"\n                isUser={true}\n            ></ChatMessage>\n            <ChatMessage\n                text={\"Hi, Sweet! So, what do you wanna do today?Sweet! \"}\n                userName=\"name\"\n                isUser={false}\n            ></ChatMessage>\n                    <ChatMessage\n                text={\"Hi, Sweet! So, what do you wanna do today?Sweet! \"}\n                userName=\"name\"\n                isUser={true}\n            ></ChatMessage>\n            <ChatMessage\n                text={\"Hi, Sweet! So, what do you wanna do today?Sweet! \"}\n                userName=\"name\"\n                isUser={false}\n            ></ChatMessage>\n                                <ChatMessage\n                text={\"Hi, Sweet! So, what do you wanna do today?Sweet! \"}\n                userName=\"name\"\n                isUser={true}\n            ></ChatMessage>\n*/","map":{"version":3,"sources":["/Users/kitan/Documents/CODING/group-chat-react-project/group-chat-react/src/Chatroom/ChatRoom.js"],"names":["Room","Message","React","useState","useEffect","io","ChatMessage","Chat","Component","constructor","props","socket","room_","data","room","user_","user","isAdmin_","admin","userName","state","isAdmin","newMessage","messages","status","componentDidMount","connectSocket","socketEvents","transport","set","field","value","setState","on","connection","emit","roomCode","console","log","messages_","message","setValue","setter","event","target","updateNewMessage","sendMessage","endRoom","render","roomName","map","msg","id","bind"],"mappings":";AAAA,OAAO,gBAAP;AACA,OAAOA,IAAP,MAAiB,aAAjB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,OAAOC,KAAP,IAAgBC,QAAhB,EAA2BC,SAA3B,QAA2C,OAA3C;AACA,OAAOC,EAAP,MAAe,kBAAf;AAGA,OAAOC,WAAP,MAAwB,eAAxB;;;AAIA,MAAMC,IAAN,SAAmBL,KAAK,CAACM,SAAzB,CAAkC;AAG9BC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAEd,UAAMA,KAAN;AAEA,SAAKC,MAAL,GAAc,IAAd;AAEA,QAAIC,KAAK,GAAGF,KAAK,CAACG,IAAN,CAAWC,IAAvB,CANc,CAMa;;AAC3B,QAAIC,KAAK,GAAGL,KAAK,CAACG,IAAN,CAAWG,IAAvB,CAPc,CAOa;;AAC3B,QAAIC,QAAQ,GAAGL,KAAK,CAACM,KAAN,IAAeH,KAAK,CAACI,QAArB,GAA+B,IAA/B,GAAqC,KAApD;AAEA,SAAKC,KAAL,GAAY;AACRN,MAAAA,IAAI,EAAEF,KADE;AAERI,MAAAA,IAAI,EAAED,KAFE;AAGRM,MAAAA,OAAO,EAAEJ,QAHD;AAIRK,MAAAA,UAAU,EAAE,EAJJ;AAKRC,MAAAA,QAAQ,EAAE,EALF;AAMRC,MAAAA,MAAM,EAAE;AANA,KAAZ;AAUH;;AAGDC,EAAAA,iBAAiB,GAAE;AACf,SAAKC,aAAL;AACA,SAAKC,YAAL;AACH;;AAEDD,EAAAA,aAAa,GAAE;AACX,SAAKf,MAAL,GAAcN,EAAE,CAAC,yBAAD,EAA4B;AAAEuB,MAAAA,SAAS,EAAE,CAAC,WAAD;AAAb,KAA5B,CAAhB;AACH;;AAGDC,EAAAA,GAAG,CAACC,KAAD,EAAQC,KAAR,EAAc;AACb,SAAKC,QAAL,CAAc;AAAC,OAACF,KAAD,GAASC;AAAV,KAAd;AACH;;AAEDJ,EAAAA,YAAY,GAAE;AAGV;AACA,SAAKhB,MAAL,CAAYsB,EAAZ,CAAe,SAAf,EAA2BC,UAAD,IAAgB;AAEtC,UAAG,KAAKd,KAAL,CAAWC,OAAd,EAAsB,KAAKV,MAAL,CAAYwB,IAAZ,CAAiB,aAAjB,EAAgC,KAAKf,KAAL,CAAWN,IAAX,CAAgBsB,QAAhD,EAA0D,KAAKhB,KAAL,CAAWN,IAArE,EAAtB,KACK,KAAKH,MAAL,CAAYwB,IAAZ,CAAiB,WAAjB,EAA8B,KAAKf,KAAL,CAAWN,IAAX,CAAgBsB,QAA9C;AACLC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AAGA,WAAK3B,MAAL,CAAYsB,EAAZ,CAAe,kBAAf,EAAoCM,SAAD,IAAe;AAC9C,aAAKV,GAAL,CAAS,UAAT,EAAoBU,SAApB;AACAF,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCC,SAAnC;AACH,OAHD;AAKA,WAAK5B,MAAL,CAAYsB,EAAZ,CAAe,qBAAf,EAAuCO,OAAD,IAAa;AAC/CH,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBE,OAAzB;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAY,CAAC,GAAG,KAAKlB,KAAL,CAAWG,QAAf,EAAwBiB,OAAxB,CAAZ;AACA,aAAKX,GAAL,CAAS,UAAT,EAAqB,CAAC,GAAG,KAAKT,KAAL,CAAWG,QAAf,EAAwBiB,OAAxB,CAArB;AACA,aAAKX,GAAL,CAAS,SAAT,EAAoB,QAApB;AACH,OALD;AAMC,KAlBL;AAqBH;;AAEDY,EAAAA,QAAQ,CAACC,MAAD,EAASC,KAAT,EAAe;AACnB,SAAKd,GAAL,CAASa,MAAT,EAAiBC,KAAK,CAACC,MAAN,CAAab,KAA9B;AACH;;AAEDc,EAAAA,gBAAgB,CAACF,KAAD,EAAO;AACnB,SAAKd,GAAL,CAAS,YAAT,EAAuBc,KAAK,CAACC,MAAN,CAAab,KAApC;AACH;;AAEDe,EAAAA,WAAW,GAAE;AACT,SAAKnC,MAAL,CAAYwB,IAAZ,CAAiB,mBAAjB,EAAsC,KAAKf,KAAL,CAAWN,IAAX,CAAgBsB,QAAtD,EAAgE,KAAKhB,KAAL,CAAWE,UAA3E,EAAuF,KAAKF,KAAL,CAAWJ,IAAX,CAAgBG,QAAvG;AACA,SAAKU,GAAL,CAAS,YAAT,EAAuB,EAAvB;AACH;;AAEDkB,EAAAA,OAAO,GAAE;AACL,SAAKpC,MAAL,CAAYwB,IAAZ,CAAiB,UAAjB,EAA6BC,QAA7B;AACA,SAAKP,GAAL,CAAS,QAAT,EAAmB,QAAnB;AACH;;AAODmB,EAAAA,MAAM,GAAE;AAEJ,wBACI;AAAK,MAAA,KAAK,EAAC,MAAX;AAAA,gBACC,KAAK5B,KAAL,CAAWN,IAAX,gBAEG;AAAK,QAAA,KAAK,EAAC,eAAX;AAAA,gCAEA;AAAK,UAAA,KAAK,EAAC,YAAX;AAAA,kCAEI;AAAG,YAAA,KAAK,EAAC,YAAT;AAAA,sBAAuB,KAAKM,KAAL,CAAWN,IAAX,CAAgBmC;AAAvC;AAAA;AAAA;AAAA;AAAA,kBAFJ,EAGK,KAAK7B,KAAL,CAAWC,OAAX,gBACG;AAAG,YAAA,KAAK,EAAC,iBAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADH,gBAEG;AAAG,YAAA,KAAK,EAAC,iBAAT;AAA2B,YAAA,OAAO,EAAE,KAAK0B,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALR;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFA,eAaA;AAAK,UAAA,KAAK,EAAC,wBAAX;AAAA,oBAEK,KAAK3B,KAAL,CAAWG,QAAX,gBACD;AAAA,sBACK,KAAKH,KAAL,CAAWG,QAAX,CAAoB2B,GAApB,CAAwBC,GAAG,iBAAG,QAAC,WAAD;AAA0B,cAAA,IAAI,EAAEA,GAAG,CAACX,OAApC;AAA6C,cAAA,QAAQ,EAAEW,GAAG,CAAChC,QAA3D;AAAsE,cAAA,MAAM,EAAE,KAAKC,KAAL,CAAWJ,IAAX,CAAgBG,QAAhB,IAA4BgC,GAAG,CAAChC;AAA9G,eAAkBgC,GAAG,CAACC,EAAtB;AAAA;AAAA;AAAA;AAAA,oBAA9B;AADL;AAAA;AAAA;AAAA;AAAA,kBADC,GAII;AANT;AAAA;AAAA;AAAA;AAAA,gBAbA,eAuBI;AAAK,UAAA,KAAK,EAAC,oBAAX;AAAA,kCAEI;AAAQ,YAAA,IAAI,EAAC,MAAb;AAAoB,YAAA,KAAK,EAAE,KAAKhC,KAAL,CAAWE,UAAtC;AAAkD,YAAA,QAAQ,EAAGqB,KAAD,IAAU,KAAKF,QAAL,CAAc,YAAd,EAA4BE,KAA5B,CAAtE;AAA0G,YAAA,KAAK,EAAC;AAAhH;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI;AAAG,YAAA,KAAK,EAAC,iCAAT;AAA2C,YAAA,OAAO,EAAE,KAAKG,WAAL,CAAiBO,IAAjB,CAAsB,IAAtB,CAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAvBJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFH,GAkCI;AAnCL;AAAA;AAAA;AAAA;AAAA,YADJ;AAyCH;;AArI6B;;AAyIlC,eAAe9C,IAAf;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import './chatroom.css';\nimport Room from './RoomModel'\nimport Message from './MessageModel'\n\nimport React, { useState,  useEffect} from 'react';\nimport io from 'socket.io-client';\n\n\nimport ChatMessage from './ChatMessage';\n\n\n\nclass Chat extends React.Component{\n\n\n    constructor(props){\n\n        super(props)\n\n        this.socket = null; \n\n        let room_ = props.data.room//new Room(\"25\", \"love isalnd ❤️\", \"kit\")//props.data.room\n        let user_ = props.data.user//{userName: props.data.user.userName} //props.data.user_\n        let isAdmin_ = room_.admin == user_.userName? true: false;\n\n        this.state ={\n            room: room_,\n            user: user_,\n            isAdmin: isAdmin_,\n            newMessage: \"\",\n            messages: [],\n            status: \"loading\"\n        }\n\n        \n    }\n\n    \n    componentDidMount(){\n        this.connectSocket()\n        this.socketEvents()\n    }\n\n    connectSocket(){\n        this.socket = io(\"http://192.168.1.9:3000\", { transport: ['websocket']}) ;\n    }\n\n\n    set(field, value){\n        this.setState({[field]: value})\n    }\n\n    socketEvents(){\n\n        \n        //socket functions\n        this.socket.on('connect', (connection) => {\n           \n            if(this.state.isAdmin)this.socket.emit('create-room', this.state.room.roomCode, this.state.room)\n            else this.socket.emit('join-room', this.state.room.roomCode)\n            console.log(\"connected.\")\n\n\n            this.socket.on('backlog-messages', (messages_) => {\n                this.set(\"messages\",messages_ )\n                console.log(\"messages received: \", messages_)\n            });\n\n            this.socket.on('broadcasted-message', (message) => {\n                console.log(\"received: \",message)\n                console.log([...this.state.messages,message])\n                this.set(\"messages\", [...this.state.messages,message])\n                this.set(\"pending\", \"loaded\")\n            });\n            });\n\n\n    }\n\n    setValue(setter, event){\n        this.set(setter, event.target.value)\n    }\n\n    updateNewMessage(event){\n        this.set(\"newMessage\" ,event.target.value)\n    }\n\n    sendMessage(){\n        this.socket.emit(\"broadcast-message\", this.state.room.roomCode, this.state.newMessage, this.state.user.userName)\n        this.set(\"newMessage\", \"\")\n    }\n\n    endRoom(){\n        this.socket.emit(\"end-room\", roomCode)\n        this.set(\"status\", \"closed\")\n    }\n    \n\n\n\n\n  \n    render(){\n\n        return (\n            <div class=\"root\">\n            {this.state.room?\n        \n                <div class=\"chatroom-view\">\n                \n                <div class=\"title-view\">\n     \n                    <p class=\"title-text\">{this.state.room.roomName}</p>\n                    {this.state.isAdmin?\n                        <p class=\"title-leave-btn\">end room</p>:\n                        <p class=\"title-leave-btn\" onClick={this.endRoom}>leave</p>\n                    }\n\n        \n                </div>\n              \n                <div class=\"chatroom-messages-view\">\n            \n                    {this.state.messages?\n                    <div>\n                        {this.state.messages.map(msg=> <ChatMessage key={msg.id} text={msg.message} userName={msg.userName } isUser={this.state.user.userName == msg.userName}/>)}\n                        </div>\n                        :null\n                    }\n        \n                    </div>\n                    <div class=\"typed-message-view\">\n                    \n                        <input  type=\"text\" value={this.state.newMessage} onChange={(event)=> this.setValue(\"newMessage\", event) }class=\"typed-message-input\"></input>\n                        <i class=\"material-icons send-message-btn\" onClick={this.sendMessage.bind(this)}>&#xe163;</i>\n        \n        \n                    </div>\n        \n                </div>\n                :null\n            }\n            </div>\n        );\n        \n    }\n    \n}\n\nexport default Chat;\n\n\n\n/*\n\n\n      //let roomCode_ = localStorage.getItem(\"room-code\")\n        let isAdmin_ = localStorage.getItem('create-room')\n        let roomName_ = localStorage.getItem(\"room-name\")\n        let userName_ = localStorage.getItem(\"user-name\")\n        let room_ = {\n            name:roomName_,\n            admin: userName_,\n            password:\"xxx\",\n            code: roomCode_\n        }\n\n\n                <ChatMessage\n                text={\"Hi, Sweet! So, what do you wanna do today?Sweet! \"}\n                userName=\"name\"\n                isUser={true}\n            ></ChatMessage>\n            <ChatMessage\n                text={\"Hi, Sweet! So, what do you wanna do today?Sweet! \"}\n                userName=\"name\"\n                isUser={false}\n            ></ChatMessage>\n                    <ChatMessage\n                text={\"Hi, Sweet! So, what do you wanna do today?Sweet! \"}\n                userName=\"name\"\n                isUser={true}\n            ></ChatMessage>\n            <ChatMessage\n                text={\"Hi, Sweet! So, what do you wanna do today?Sweet! \"}\n                userName=\"name\"\n                isUser={false}\n            ></ChatMessage>\n                                <ChatMessage\n                text={\"Hi, Sweet! So, what do you wanna do today?Sweet! \"}\n                userName=\"name\"\n                isUser={true}\n            ></ChatMessage>\n*/"]},"metadata":{},"sourceType":"module"}