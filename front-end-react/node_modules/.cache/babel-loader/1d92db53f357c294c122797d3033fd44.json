{"ast":null,"code":"var _jsxFileName = \"/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/front-end-react/src/Chatroom/ChatMessage.js\",\n    _s = $RefreshSig$();\n\nimport './ChatMessage.css';\nimport { FaGrin, FaExclamationCircle } from \"react-icons/fa\";\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChatMessage(props) {\n  _s();\n\n  const [showReactions, setShowReactions] = useState(false);\n  const reactionOptions = ['❤️', '😂', '🥴'];\n\n  function onToggleReactions() {\n    setShowReactions(!showReactions);\n  }\n\n  function countEmoji(emoji) {\n    let list = props.reactions.filter(obj => obj.emoji == emoji);\n    if (list) return list.length;else return 0;\n  }\n\n  function reacted(tkn) {\n    let react = props.reactions.find(obj => obj.by == tkn);\n    if (react) return react.emoji;else return false;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-message-view \" + (props.isUser ? \"user\" : \" \"),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-message-text-view\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          class: \"username-text\",\n          onClick: props.onClick,\n          children: props.userName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"reaction-options \" + (showReactions ? \"cshow\" : \"chide\"),\n          children: reactionOptions.map(emoji => {\n            let code = emoji;\n            return /*#__PURE__*/_jsxDEV(\"span\", {\n              onClick: () => {\n                props.onAddReaction(emoji);\n                onToggleReactions();\n              },\n              className: \"option\",\n              children: code\n            }, emoji, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 39\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"username-text reaction-bar \",\n          children: reactionOptions.map(emoji => {\n            let count = countEmoji(emoji);\n            if (count > 0) return /*#__PURE__*/_jsxDEV(\"span\", {\n              class: \"reaction-tracking\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                class: \"reaction-emoji\",\n                children: count > 0 ? emoji : \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 31\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                class: \"reaction-count\",\n                children: count\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 29\n              }, this)]\n            }, emoji, true, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 29\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"chat-message-text \" + (props.isUser ? \"user\" : \" \"),\n        children: props.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options-left-view\",\n      children: !props.isUser ? /*#__PURE__*/_jsxDEV(FaGrin, {\n        className: \"\",\n        onClick: onToggleReactions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 24\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChatMessage, \"8crevcxS5cgWk9mHqGiNR1ewd1g=\");\n\n_c = ChatMessage;\nexport default ChatMessage;\n/*\n\n  function readEmoji(emoji){\n    if(emoji[0] != '&')return emoji\n    let pair = emoji.substring(1).split('&');\n    return pair\n  }\n\n\n  //if(emoji[0] != '&')code = String.fromCodePoint(emoji)\n  //else code = String.fromCodePoint.apply(String, readEmoji(emoji))\n\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatMessage\");","map":{"version":3,"sources":["/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/front-end-react/src/Chatroom/ChatMessage.js"],"names":["FaGrin","FaExclamationCircle","useState","ChatMessage","props","showReactions","setShowReactions","reactionOptions","onToggleReactions","countEmoji","emoji","list","reactions","filter","obj","length","reacted","tkn","react","find","by","isUser","onClick","userName","map","code","onAddReaction","count","text"],"mappings":"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","sourcesContent":["\nimport './ChatMessage.css';\nimport { FaGrin, FaExclamationCircle } from \"react-icons/fa\";\nimport{ useState} from 'react';\n\n\n\nfunction ChatMessage(props) {\n\n  const [showReactions, setShowReactions] = useState(false)\n  const reactionOptions = ['❤️', '😂', '🥴']\n\n\n  function onToggleReactions(){\n    setShowReactions(!showReactions)\n  }\n\n  function countEmoji(emoji){\n      let list = props.reactions.filter(obj => obj.emoji == emoji)\n      if(list)return list.length\n      else return 0\n  }\n\n\n  function reacted( tkn ){\n    let react = props.reactions.find(obj => obj.by == tkn)\n    if(react) return react.emoji\n    else return false\n  }\n\n\n\n\n  return (\n      \n    <div className={\"chat-message-view \"+ (props.isUser?\"user\":\" \")}>\n\n            <div className=\"chat-message-text-view\">\n              <div className=\"header\">\n                <p class=\"username-text\"  onClick={props.onClick}>{props.userName}</p> \n                {/*!props.isUser?<FaGrin  className=\"show-reaction-button\" onClick={onToggleReactions} ></FaGrin>:null*/}\n\n                <div class={\"reaction-options \"+ (showReactions?\"cshow\":\"chide\")}>\n                      {   reactionOptions.map(\n                                emoji =>{\n                                    let code = emoji\n                                    return(\n                                      <span key={emoji} onClick={()=>{props.onAddReaction(emoji); onToggleReactions()}} className=\"option\">\n                                        {code}\n                                      </span> \n                                    )\n                                }\n                          )}\n                  </div>\n\n\n                <div class={\"username-text reaction-bar \"}>\n                      {reactionOptions.map((emoji)=>{\n                      let count = countEmoji(emoji)\n                      if(count > 0)return(\n                  \n                            <span class={\"reaction-tracking\"} key={emoji}>\n                              <span class={\"reaction-emoji\"}>{count> 0? emoji: \"\"}</span>\n                            <span class={\"reaction-count\"} >{count}</span>\n                          </span>\n                      )\n                    })\n                  }\n              </div>\n              </div>\n              \n              <p className={\"chat-message-text \"+ (props.isUser?\"user\":\" \")}>\n                  {props.text}\n              </p>\n  \n        </div>\n\n        <div className=\"options-left-view\">\n        {!props.isUser?<FaGrin  className=\"\" onClick={onToggleReactions} ></FaGrin>:null}\n\n        </div>\n\n        \n        \n      \n\n\n\n\n\n    </div>\n    );\n}\n\nexport default ChatMessage;\n\n\n/*\n\n  function readEmoji(emoji){\n    if(emoji[0] != '&')return emoji\n    let pair = emoji.substring(1).split('&');\n    return pair\n  }\n\n\n  //if(emoji[0] != '&')code = String.fromCodePoint(emoji)\n  //else code = String.fromCodePoint.apply(String, readEmoji(emoji))\n\n*/"]},"metadata":{},"sourceType":"module"}