{"ast":null,"code":"//FIREBASE CONFIG//\nimport firebase from 'firebase';\nimport 'firebase/firestore';\nvar firebaseConfig = {\n  apiKey: process.env.REACT_APP_apiKey,\n  authDomain: process.env.REACT_APP_authDomain,\n  projectId: process.env.REACT_APP_projectId,\n  storageBucket: process.env.REACT_APP_storageBucket,\n  messagingSenderId: process.env.REACT_APP_messagingSenderId,\n  appId: process.env.REACT_APP_appId,\n  measurementId: process.env.REACT_APP_measurementId\n};\nfirebase.initializeApp(firebaseConfig); //DATABASE INIT\n\nconst firestore = firebase.firestore();\nvar database = firebase.database();\nconst chatroomsDB = firestore.collection('chatrooms');\nconst usersDB = firestore.collection('users'); //const messagesRef = firestore.collection('messages');\n//Functional groups\n\nclass FirebaseUtil {\n  static async doUserCheckIn() {\n    if (!localStorage.getItem(\"user-token\")) {\n      let userID = await usersDB.add({\n        name: \"none\",\n        type: \"annon\"\n      }).then(res => {\n        localStorage.setItem(\"user-token\", res.id);\n        console.log(\"generating new profile: \", res.id);\n        return res.id;\n      });\n      return userID;\n    } else {\n      console.log(\"returning user: \", localStorage.getItem(\"user-token\"));\n      return localStorage.getItem(\"user-token\");\n    }\n  }\n\n  static async createRoom(userName) {\n    chatroomsDB.where(\"code\", \"==\", \"25\").get().then(querySnapshot => {\n      querySnapshot.forEach(doc => {\n        // doc.data() is never undefined for query doc snapshots\n        console.log(doc.id, \" => \", doc.data());\n      });\n    }).catch(error => {\n      console.log(\"Error getting documents: \", error);\n    });\n    /* const apiCompletionPromise = chatroomsDB.add({\n         admin: userName,\n         adminId: adminId,\n         roomName: roomName,\n         type: \"temporary\",\n         timeStamp: firestore.FieldValue.serverTimestamp()\n      })*/\n    //return apiCompletionPromise\n  }\n\n}\n\nexport { FirebaseUtil };","map":{"version":3,"sources":["/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/FirebaseUtil/FirebaseUtil.js"],"names":["firebase","firebaseConfig","apiKey","process","env","REACT_APP_apiKey","authDomain","REACT_APP_authDomain","projectId","REACT_APP_projectId","storageBucket","REACT_APP_storageBucket","messagingSenderId","REACT_APP_messagingSenderId","appId","REACT_APP_appId","measurementId","REACT_APP_measurementId","initializeApp","firestore","database","chatroomsDB","collection","usersDB","FirebaseUtil","doUserCheckIn","localStorage","getItem","userID","add","name","type","then","res","setItem","id","console","log","createRoom","userName","where","get","querySnapshot","forEach","doc","data","catch","error"],"mappings":"AACA;AACA,OAAOA,QAAP,MAAqB,UAArB;AACA,OAAO,oBAAP;AAGA,IAAIC,cAAc,GAAG;AACjBC,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADH;AAEjBC,EAAAA,UAAU,EAAEH,OAAO,CAACC,GAAR,CAAYG,oBAFP;AAGjBC,EAAAA,SAAS,EAAEL,OAAO,CAACC,GAAR,CAAYK,mBAHN;AAIjBC,EAAAA,aAAa,EAAEP,OAAO,CAACC,GAAR,CAAYO,uBAJV;AAKjBC,EAAAA,iBAAiB,EAAET,OAAO,CAACC,GAAR,CAAYS,2BALd;AAMjBC,EAAAA,KAAK,EAAEX,OAAO,CAACC,GAAR,CAAYW,eANF;AAOjBC,EAAAA,aAAa,EAAEb,OAAO,CAACC,GAAR,CAAYa;AAPV,CAArB;AAUAjB,QAAQ,CAACkB,aAAT,CAAuBjB,cAAvB,E,CAGA;;AACA,MAAMkB,SAAS,GAAGnB,QAAQ,CAACmB,SAAT,EAAlB;AACA,IAAIC,QAAQ,GAAGpB,QAAQ,CAACoB,QAAT,EAAf;AAEA,MAAMC,WAAW,GAAGF,SAAS,CAACG,UAAV,CAAqB,WAArB,CAApB;AACA,MAAMC,OAAO,GAAGJ,SAAS,CAACG,UAAV,CAAqB,OAArB,CAAhB,C,CACA;AAGA;;AACA,MAAME,YAAN,CAAoB;AAEW,eAAbC,aAAa,GAAE;AAEvB,QAAG,CAACC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAJ,EAAuC;AAEnC,UAAIC,MAAM,GAAG,MAAML,OAAO,CAACM,GAAR,CAAY;AAC3BC,QAAAA,IAAI,EAAE,MADqB;AAE3BC,QAAAA,IAAI,EAAE;AAFqB,OAAZ,EAGhBC,IAHgB,CAGXC,GAAG,IAAG;AACVP,QAAAA,YAAY,CAACQ,OAAb,CAAqB,YAArB,EAAmCD,GAAG,CAACE,EAAvC;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCJ,GAAG,CAACE,EAA5C;AACA,eAAOF,GAAG,CAACE,EAAX;AACH,OAPkB,CAAnB;AASA,aAAOP,MAAP;AAEH,KAbD,MAaK;AACCQ,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCX,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAhC;AACA,aAAOD,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAP;AACL;AACN;;AAEsB,eAAVW,UAAU,CAACC,QAAD,EAAU;AAG7BlB,IAAAA,WAAW,CAACmB,KAAZ,CAAkB,MAAlB,EAA0B,IAA1B,EAAgC,IAAhC,EACKC,GADL,GAEKT,IAFL,CAEWU,aAAD,IAAmB;AACrBA,MAAAA,aAAa,CAACC,OAAd,CAAuBC,GAAD,IAAS;AAC3B;AACAR,QAAAA,OAAO,CAACC,GAAR,CAAYO,GAAG,CAACT,EAAhB,EAAoB,MAApB,EAA4BS,GAAG,CAACC,IAAJ,EAA5B;AACH,OAHD;AAIH,KAPL,EAQKC,KARL,CAQYC,KAAD,IAAW;AACdX,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCU,KAAzC;AACH,KAVL;AAYD;AACP;AACA;AACA;AACA;AACA;AACA;AAGQ;AAEL;;AAjDiB;;AAwDpB,SACIvB,YADJ","sourcesContent":["\n//FIREBASE CONFIG//\nimport firebase from 'firebase';\nimport 'firebase/firestore';\n\n\nvar firebaseConfig = {\n    apiKey: process.env.REACT_APP_apiKey,\n    authDomain: process.env.REACT_APP_authDomain,\n    projectId: process.env.REACT_APP_projectId,\n    storageBucket: process.env.REACT_APP_storageBucket,\n    messagingSenderId: process.env.REACT_APP_messagingSenderId,\n    appId: process.env.REACT_APP_appId,\n    measurementId: process.env.REACT_APP_measurementId\n};\n  \nfirebase.initializeApp(firebaseConfig)\n\n\n//DATABASE INIT\nconst firestore = firebase.firestore();\nvar database = firebase.database();\n\nconst chatroomsDB = firestore.collection('chatrooms');\nconst usersDB = firestore.collection('users');\n//const messagesRef = firestore.collection('messages');\n\n\n//Functional groups\nclass FirebaseUtil  {\n\n     static async doUserCheckIn(){\n\n          if(!localStorage.getItem(\"user-token\")){\n  \n              let userID = await usersDB.add({\n                  name: \"none\",\n                  type: \"annon\"\n              }).then(res =>{\n                  localStorage.setItem(\"user-token\", res.id)\n                  console.log(\"generating new profile: \", res.id)\n                  return res.id\n              })\n\n              return userID\n\n          }else{\n                console.log(\"returning user: \", localStorage.getItem(\"user-token\"))\n                return localStorage.getItem(\"user-token\");\n          }\n    }\n    \n    static async createRoom(userName){\n\n      \n        chatroomsDB.where(\"code\", \"==\", \"25\")\n            .get()\n            .then((querySnapshot) => {\n                querySnapshot.forEach((doc) => {\n                    // doc.data() is never undefined for query doc snapshots\n                    console.log(doc.id, \" => \", doc.data());\n                });\n            })\n            .catch((error) => {\n                console.log(\"Error getting documents: \", error);\n            });\n\n       /* const apiCompletionPromise = chatroomsDB.add({\n            admin: userName,\n            adminId: adminId,\n            roomName: roomName,\n            type: \"temporary\",\n            timeStamp: firestore.FieldValue.serverTimestamp()\n\n        })*/\n\n        //return apiCompletionPromise\n\n  }\n\n\n\n}\n\n\nexport {\n    FirebaseUtil\n}\n\n"]},"metadata":{},"sourceType":"module"}