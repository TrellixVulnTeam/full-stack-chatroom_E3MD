{"ast":null,"code":"//FIREBASE CONFIG//\nimport firebase from 'firebase';\n\nrequire(\"firebase/firestore\");\n\nvar firebaseConfig = {\n  apiKey: process.env.REACT_APP_apiKey,\n  authDomain: process.env.REACT_APP_authDomain,\n  projectId: process.env.REACT_APP_projectId,\n  storageBucket: process.env.REACT_APP_storageBucket,\n  messagingSenderId: process.env.REACT_APP_messagingSenderId,\n  appId: process.env.REACT_APP_appId,\n  measurementId: process.env.REACT_APP_measurementId\n};\nfirebase.initializeApp(firebaseConfig); //DATABASE INIT\n\nconst firestore = firebase.firestore();\nconst chatroomsDB = firestore.collection('chatrooms');\nconst messagesRef = firestore.collection('messages'); //Functional groups\n\nclass rooms {\n  static async createRoom(roomname, username, password) {\n    const rand = () => Math.random(0).toString(36).substr(2);\n\n    const token = length => (rand() + rand() + rand() + rand()).substr(0, length);\n\n    console.log(roomname, username, password);\n    await chatroomsDB.add({\n      name: roomname,\n      admin: username,\n      password: password\n    });\n  }\n\n  static async joinroom(userName, roomCode) {\n    this.room = roomCode;\n    user_utils.setUser(userName);\n  }\n\n  static async getRoom(roomCode) {\n    return chatroomsDB.doc(roomCode).get().then(doc => {\n      if (doc.exists) {\n        console.log(\"Document data:\", doc.data());\n        return doc.data();\n      } else {\n        console.log(\"No such document!\");\n        return \"\";\n      }\n    }).catch(error => {\n      console.log(\"Error gettingdocument:\", error);\n    });\n  }\n\n  static async getMessages(roomCode) {\n    return messagesRef.doc(roomCode).orderBy('createdAt').get().then(doc => {\n      if (doc.exists) {\n        console.log(\"Document data:\", doc.data());\n        return doc.data();\n      } else {\n        console.log(\"No such document!\");\n        return \"\";\n      }\n    }).catch(error => {\n      console.log(\"Error gettingdocument:\", error);\n    });\n  }\n\n}\n\nrooms.user = null;\nrooms.room = null;\n\nclass user_utils {\n  static setUser(name, id) {\n    this.user = {\n      name: name\n    };\n    localStorage.setItem(\"user-name\", name);\n  }\n\n}\n\nexport { rooms, user_utils, firebase, firestore };","map":{"version":3,"sources":["/Users/kitan/Documents/CODING/group-chat-react-project/group-chat-react/src/util.js"],"names":["firebase","require","firebaseConfig","apiKey","process","env","REACT_APP_apiKey","authDomain","REACT_APP_authDomain","projectId","REACT_APP_projectId","storageBucket","REACT_APP_storageBucket","messagingSenderId","REACT_APP_messagingSenderId","appId","REACT_APP_appId","measurementId","REACT_APP_measurementId","initializeApp","firestore","chatroomsDB","collection","messagesRef","rooms","createRoom","roomname","username","password","rand","Math","random","toString","substr","token","length","console","log","add","name","admin","joinroom","userName","roomCode","room","user_utils","setUser","getRoom","doc","get","then","exists","data","catch","error","getMessages","orderBy","user","id","localStorage","setItem"],"mappings":"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","sourcesContent":["\n//FIREBASE CONFIG//\nimport firebase from 'firebase';\nrequire(\"firebase/firestore\");\n\n\nvar firebaseConfig = {\n    apiKey: process.env.REACT_APP_apiKey,\n    authDomain: process.env.REACT_APP_authDomain,\n    projectId: process.env.REACT_APP_projectId,\n    storageBucket: process.env.REACT_APP_storageBucket,\n    messagingSenderId: process.env.REACT_APP_messagingSenderId,\n    appId: process.env.REACT_APP_appId,\n    measurementId: process.env.REACT_APP_measurementId\n};\n  \nfirebase.initializeApp(firebaseConfig)\n\n//DATABASE INIT\nconst firestore = firebase.firestore();\nconst chatroomsDB= firestore.collection('chatrooms');\nconst messagesRef = firestore.collection('messages');\n\n\n\n//Functional groups\nclass rooms  {\n\n\n    static user = null;\n    static room = null;\n    \n\n    static async createRoom(roomname, username, password){\n\n        const rand=()=>Math.random(0).toString(36).substr(2);\n        const token=(length)=>(rand()+rand()+rand()+rand()).substr(0,length);   \n\n        console.log(roomname, username, password)\n        await chatroomsDB.add({\n            name: roomname,\n            admin: username,\n            password: password\n          })\n    }\n\n    static async joinroom(userName, roomCode){\n\n        this.room = roomCode\n        user_utils.setUser(userName)\n\n    }\n\n    static async getRoom(roomCode){\n\n        return chatroomsDB.doc(roomCode).get().then((doc) => {\n            if (doc.exists) {\n                console.log(\"Document data:\", doc.data());\n                return doc.data()\n            } else {\n                console.log(\"No such document!\");\n                return \"\"\n            }\n        }).catch((error) => {\n            console.log(\"Error gettingdocument:\", error);\n        });\n\n        \n    }\n\n    static async getMessages(roomCode){\n\n\n        return messagesRef.doc(roomCode).orderBy('createdAt').get().then((doc) => {\n            if (doc.exists) {\n                console.log(\"Document data:\", doc.data());\n                return doc.data()\n            } else {\n                console.log(\"No such document!\");\n                return \"\"\n            }\n        }).catch((error) => {\n            console.log(\"Error gettingdocument:\", error);\n        });\n\n        \n    }\n\n\n}\n\nclass user_utils{\n    static setUser(name, id){\n        this.user = {\n            name: name\n        }\n\n        localStorage.setItem(\"user-name\",name)\n    }\n}\n\nexport {\n    rooms,\n    user_utils,\n    firebase,\n    firestore\n}\n"]},"metadata":{},"sourceType":"module"}