{"ast":null,"code":"var _jsxFileName = \"/Users/kitan/Documents/CODING/group-chat-react-project/group-chat-react/src/Chatroom/ChatRoom.js\";\nimport './chatroom.css';\nimport Room from './RoomModel';\nimport Message from './MessageModel';\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport ChatMessage from './ChatMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Chat extends React.Component {\n  constructor(props) {\n    super(props);\n    let room_ = new Room(\"25\", \"love isalnd ❤️\", \"kit\"); //props.data.room\n\n    let user_ = {\n      userName: \"kit\"\n    }; //props.data.user_\n\n    let isAdmin_ = room_.admin == user_.userName ? true : false;\n    this.state = {\n      room: room_,\n      user: user_,\n      isAdmin: true,\n      newMessage: \"\",\n      messages: []\n    };\n    this.socket = null;\n  }\n\n  componentDidMount() {\n    this.connectSocket();\n    this.socketEvents();\n  }\n\n  connectSocket() {\n    this.socket = io(\"http://192.168.1.9:3000\", {\n      transport: ['websocket']\n    });\n  }\n\n  set(field, value) {\n    this.setState({\n      [field]: value\n    });\n  }\n\n  socketEvents() {\n    //socket functions\n    this.socket.on('connect', connection => {\n      console.log(this.state);\n      if (this.isAdmin) this.socket.emit('create-room', this.room.roomCode);else this.socket.emit('join-room', this.room.roomCode);\n      console.log(\"connected.\");\n    });\n    this.socket.on('backlog-messages', messages_ => {\n      this.set(\"messages\", messages_);\n      console.log(\"messages received: \", messages_);\n    });\n    this.socket.on('broadcasted-message', message => {\n      console.log(\"received: \", message);\n      console.log([...this.state.messages, message]);\n      this.set(\"messages\", [...this.state.messages, message]);\n    });\n  }\n\n  setValue(setter, event) {\n    this.set(setter, event.target.value);\n  }\n\n  sendMessage() {\n    this.socket.emit(\"broadcast-message\", this.room.roomCode, this.newMessage, this.user.userName);\n    this.set(\"message\", \"\");\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"root\",\n      children: this.room ? /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"chatroom-view\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"title-view\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            class: \"title-text\",\n            children: this.room.roomName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"chatroom-messages-view\",\n          children: this.componentDidUpdatemessages ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: this.messages.map(msg => /*#__PURE__*/_jsxDEV(ChatMessage, {\n              text: msg.message,\n              userName: \"\",\n              isUser: false\n            }, msg.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 50\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 21\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"typed-message-view\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: this.newMessage,\n            onChange: event => this.setValue(\"message\", event),\n            class: \"typed-message-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n            class: \"material-icons send-message-btn\",\n            onClick: this.sendMessage.bind(this),\n            children: \"\\uE163\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Chat;\n/*\n\n\n      //let roomCode_ = localStorage.getItem(\"room-code\")\n        let isAdmin_ = localStorage.getItem('create-room')\n        let roomName_ = localStorage.getItem(\"room-name\")\n        let userName_ = localStorage.getItem(\"user-name\")\n        let room_ = {\n            name:roomName_,\n            admin: userName_,\n            password:\"xxx\",\n            code: roomCode_\n        }\n\n\n                <ChatMessage\n                text={\"Hi, Sweet! So, what do you wanna do today?Sweet! \"}\n                userName=\"name\"\n                isUser={true}\n            ></ChatMessage>\n            <ChatMessage\n                text={\"Hi, Sweet! So, what do you wanna do today?Sweet! \"}\n                userName=\"name\"\n                isUser={false}\n            ></ChatMessage>\n                    <ChatMessage\n                text={\"Hi, Sweet! So, what do you wanna do today?Sweet! \"}\n                userName=\"name\"\n                isUser={true}\n            ></ChatMessage>\n            <ChatMessage\n                text={\"Hi, Sweet! So, what do you wanna do today?Sweet! \"}\n                userName=\"name\"\n                isUser={false}\n            ></ChatMessage>\n                                <ChatMessage\n                text={\"Hi, Sweet! So, what do you wanna do today?Sweet! \"}\n                userName=\"name\"\n                isUser={true}\n            ></ChatMessage>\n*/","map":{"version":3,"sources":["/Users/kitan/Documents/CODING/group-chat-react-project/group-chat-react/src/Chatroom/ChatRoom.js"],"names":["Room","Message","React","useState","useEffect","io","ChatMessage","Chat","Component","constructor","props","room_","user_","userName","isAdmin_","admin","state","room","user","isAdmin","newMessage","messages","socket","componentDidMount","connectSocket","socketEvents","transport","set","field","value","setState","on","connection","console","log","emit","roomCode","messages_","message","setValue","setter","event","target","sendMessage","render","roomName","componentDidUpdatemessages","map","msg","id","bind"],"mappings":"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","sourcesContent":["import './chatroom.css';\nimport Room from './RoomModel'\nimport Message from './MessageModel'\n\nimport React, { useState,  useEffect} from 'react';\nimport io from 'socket.io-client';\n\n\nimport ChatMessage from './ChatMessage';\n\n\n\nclass Chat extends React.Component{\n\n\n    constructor(props){\n\n        super(props)\n\n        let room_ = new Room(\"25\", \"love isalnd ❤️\", \"kit\")//props.data.room\n        let user_ = {userName:\"kit\"} //props.data.user_\n        let isAdmin_ = room_.admin == user_.userName? true: false;\n\n        this.state ={\n            room: room_,\n            user: user_,\n            isAdmin: true,\n            newMessage: \"\",\n            messages: []\n        }\n\n        this.socket = null; \n    }\n\n    \n    componentDidMount(){\n        this.connectSocket()\n        this.socketEvents()\n    }\n\n    connectSocket(){\n        this.socket = io(\"http://192.168.1.9:3000\", { transport: ['websocket']}) ;\n    }\n\n\n    set(field, value){\n        this.setState({[field]: value})\n    }\n\n    socketEvents(){\n\n        //socket functions\n        this.socket.on('connect', (connection) => {\n            console.log(this.state)\n            if(this.isAdmin)this.socket.emit('create-room', this.room.roomCode)\n            else this.socket.emit('join-room', this.room.roomCode)\n\n            console.log(\"connected.\")\n        });\n\n        this.socket.on('backlog-messages', (messages_) => {\n            this.set(\"messages\",messages_ )\n            console.log(\"messages received: \", messages_)\n        });\n\n        this.socket.on('broadcasted-message', (message) => {\n            console.log(\"received: \",message)\n            console.log([...this.state.messages,message])\n            this.set(\"messages\", [...this.state.messages,message])\n        });\n\n    }\n\n    setValue(setter, event){\n        this.set(setter, event.target.value)\n    }\n\n    sendMessage(){\n        this.socket.emit(\"broadcast-message\", this.room.roomCode, this.newMessage, this.user.userName)\n        this.set(\"message\", \"\")\n    }\n    \n\n\n\n\n  \n    render(){\n\n        return (\n            <div class=\"root\">\n            {this.room?\n        \n                <div class=\"chatroom-view\">\n                <div class=\"title-view\">\n                    <p class=\"title-text\">{this.room.roomName}</p>\n                </div>\n                <div class=\"chatroom-messages-view\">\n            \n                    {this.componentDidUpdatemessages?\n                    <div>\n                        {this.messages.map(msg=> <ChatMessage key={msg.id} text={msg.message} userName={\"\"} isUser={false}/>)}\n                        </div>\n                        :null\n                    }\n        \n                    </div>\n                    <div class=\"typed-message-view\">\n                    \n                        <input  type=\"text\" value={this.newMessage} onChange={(event)=> this.setValue(\"message\", event) }class=\"typed-message-input\"></input>\n                        <i class=\"material-icons send-message-btn\" onClick={this.sendMessage.bind(this)}>&#xe163;</i>\n        \n        \n                    </div>\n        \n                </div>\n                :null\n            }\n            </div>\n        );\n        \n    }\n    \n}\n\nexport default Chat;\n\n\n\n/*\n\n\n      //let roomCode_ = localStorage.getItem(\"room-code\")\n        let isAdmin_ = localStorage.getItem('create-room')\n        let roomName_ = localStorage.getItem(\"room-name\")\n        let userName_ = localStorage.getItem(\"user-name\")\n        let room_ = {\n            name:roomName_,\n            admin: userName_,\n            password:\"xxx\",\n            code: roomCode_\n        }\n\n\n                <ChatMessage\n                text={\"Hi, Sweet! So, what do you wanna do today?Sweet! \"}\n                userName=\"name\"\n                isUser={true}\n            ></ChatMessage>\n            <ChatMessage\n                text={\"Hi, Sweet! So, what do you wanna do today?Sweet! \"}\n                userName=\"name\"\n                isUser={false}\n            ></ChatMessage>\n                    <ChatMessage\n                text={\"Hi, Sweet! So, what do you wanna do today?Sweet! \"}\n                userName=\"name\"\n                isUser={true}\n            ></ChatMessage>\n            <ChatMessage\n                text={\"Hi, Sweet! So, what do you wanna do today?Sweet! \"}\n                userName=\"name\"\n                isUser={false}\n            ></ChatMessage>\n                                <ChatMessage\n                text={\"Hi, Sweet! So, what do you wanna do today?Sweet! \"}\n                userName=\"name\"\n                isUser={true}\n            ></ChatMessage>\n*/"]},"metadata":{},"sourceType":"module"}