{"ast":null,"code":"//FIREBASE CONFIG//\nimport firebase from 'firebase';\nimport 'firebase/firestore';\nvar firebaseConfig = {\n  apiKey: process.env.REACT_APP_apiKey,\n  authDomain: process.env.REACT_APP_authDomain,\n  projectId: process.env.REACT_APP_projectId,\n  storageBucket: process.env.REACT_APP_storageBucket,\n  messagingSenderId: process.env.REACT_APP_messagingSenderId,\n  appId: process.env.REACT_APP_appId,\n  measurementId: process.env.REACT_APP_measurementId\n};\nfirebase.initializeApp(firebaseConfig); //DATABASE INIT\n\nconst firestore = firebase.firestore();\nvar database = firebase.database();\nconst chatroomsDB = firestore.collection('chatrooms');\nconst usersDB = firestore.collection('users'); //const messagesRef = firestore.collection('messages');\n//Functional groups\n\nclass FirebaseUtil {\n  static async getUserToken() {\n    if (!localStorage.getItem(\"user-token\")) {\n      let userID = await usersDB.add({\n        name: \"none\",\n        type: \"annon\"\n      }).then(res => {\n        localStorage.setItem(\"user-token\", res.id);\n        console.log(\"generating new profile: \", res.id);\n        return res.id;\n      });\n      return userID;\n    } else {\n      console.log(\"returning user: \", localStorage.getItem(\"user-token\"));\n      return localStorage.getItem(\"user-token\");\n    }\n  }\n\n  static async createRoom(userName, adminId, roomName) {\n    let code = stringGen(6);\n    chatroomsDB.get().then(querySnapshot => {\n      let duplicatedCode = true;\n\n      while (duplicatedCode) {\n        querySnapshot.docs.forEach(doc => console.log(doc));\n        duplicatedCode = querySnapshot.docs.find(doc => doc.data().code == code);\n        console.log(duplicatedCode);\n        console.log(\"code is duplicated: \", code);\n        code = stringGen(6);\n      }\n\n      console.log(\"code is not duplicated: \", code);\n    }).catch(error => {\n      console.log(\"Error getting documents: \", error);\n    });\n    const apiCompletionPromise = chatroomsDB.add({\n      admin: userName,\n      adminId: adminId,\n      roomName: roomName,\n      type: \"temporary\",\n      timeStamp: \"\" //firestore.FieldValue.serverTimestamp()\n\n    });\n    return apiCompletionPromise;\n  }\n\n}\n\nexport { FirebaseUtil };\n\nfunction stringGen(len) {\n  var text = \"\";\n  var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n\n  for (var i = 0; i < len; i++) text += charset.charAt(Math.floor(Math.random() * charset.length));\n\n  return text;\n}","map":{"version":3,"sources":["/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/FirebaseUtil/FirebaseUtil.js"],"names":["firebase","firebaseConfig","apiKey","process","env","REACT_APP_apiKey","authDomain","REACT_APP_authDomain","projectId","REACT_APP_projectId","storageBucket","REACT_APP_storageBucket","messagingSenderId","REACT_APP_messagingSenderId","appId","REACT_APP_appId","measurementId","REACT_APP_measurementId","initializeApp","firestore","database","chatroomsDB","collection","usersDB","FirebaseUtil","getUserToken","localStorage","getItem","userID","add","name","type","then","res","setItem","id","console","log","createRoom","userName","adminId","roomName","code","stringGen","get","querySnapshot","duplicatedCode","docs","forEach","doc","find","data","catch","error","apiCompletionPromise","admin","timeStamp","len","text","charset","i","charAt","Math","floor","random","length"],"mappings":"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","sourcesContent":["\n//FIREBASE CONFIG//\nimport firebase from 'firebase';\nimport 'firebase/firestore';\n\n\nvar firebaseConfig = {\n    apiKey: process.env.REACT_APP_apiKey,\n    authDomain: process.env.REACT_APP_authDomain,\n    projectId: process.env.REACT_APP_projectId,\n    storageBucket: process.env.REACT_APP_storageBucket,\n    messagingSenderId: process.env.REACT_APP_messagingSenderId,\n    appId: process.env.REACT_APP_appId,\n    measurementId: process.env.REACT_APP_measurementId\n};\n  \nfirebase.initializeApp(firebaseConfig)\n\n\n//DATABASE INIT\nconst firestore = firebase.firestore();\nvar database = firebase.database();\n\nconst chatroomsDB = firestore.collection('chatrooms');\nconst usersDB = firestore.collection('users');\n//const messagesRef = firestore.collection('messages');\n\n\n//Functional groups\nclass FirebaseUtil  {\n\n     static async getUserToken(){\n\n          if(!localStorage.getItem(\"user-token\")){\n  \n              let userID = await usersDB.add({\n                  name: \"none\",\n                  type: \"annon\"\n              }).then(res =>{\n                  localStorage.setItem(\"user-token\", res.id)\n                  console.log(\"generating new profile: \", res.id)\n                  return res.id\n              })\n\n              return userID\n\n          }else{\n                console.log(\"returning user: \", localStorage.getItem(\"user-token\"))\n                return localStorage.getItem(\"user-token\");\n          }\n    }\n    \n    static async createRoom(userName, adminId, roomName){\n\n        let code = stringGen(6);\n        chatroomsDB.get().then((querySnapshot) => {\n\n            let duplicatedCode = true;\n            while(duplicatedCode){\n                querySnapshot.docs.forEach(doc => console.log(doc))\n                duplicatedCode = querySnapshot.docs.find(doc => (doc.data()).code == code)\n                console.log(duplicatedCode)\n                console.log(\"code is duplicated: \",code)\n                code = stringGen(6);\n                \n            }\n\n            console.log(\"code is not duplicated: \",code)\n              \n        }).catch((error) => {\n                console.log(\"Error getting documents: \", error);\n        })\n        \n\n        const apiCompletionPromise = chatroomsDB.add({\n            admin: userName,\n            adminId: adminId,\n            roomName: roomName,\n            type: \"temporary\",\n            timeStamp: \"\"//firestore.FieldValue.serverTimestamp()\n\n        })\n\n        return apiCompletionPromise\n\n  }\n\n\n\n}\n\n\nexport {\n    FirebaseUtil\n}\n\nfunction stringGen(len) {\n    var text = \"\";\n    \n    var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n    \n    for (var i = 0; i < len; i++)\n        text += charset.charAt(Math.floor(Math.random() * charset.length));\n    \n    return text;\n    }"]},"metadata":{},"sourceType":"module"}