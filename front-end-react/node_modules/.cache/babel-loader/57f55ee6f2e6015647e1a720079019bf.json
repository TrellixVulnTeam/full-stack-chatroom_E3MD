{"ast":null,"code":"//FIREBASE CONFIG//\n\n/*import firebase from 'firebase';\nrequire(\"firebase/firestore\");\n\n\nvar firebaseConfig = {\n    apiKey: process.env.REACT_APP_apiKey,\n    authDomain: process.env.REACT_APP_authDomain,\n    projectId: process.env.REACT_APP_projectId,\n    storageBucket: process.env.REACT_APP_storageBucket,\n    messagingSenderId: process.env.REACT_APP_messagingSenderId,\n    appId: process.env.REACT_APP_appId,\n    measurementId: process.env.REACT_APP_measurementId\n};\n  \nfirebase.initializeApp(firebaseConfig)\n\n//DATABASE INIT\nconst firestore = firebase.firestore();\nconst chatroomsDB= firestore.collection('chatrooms');\nconst messagesRef = firestore.collection('messages');\n\n\n\n//Functional groups\nclass rooms  {\n\n\n    static user = null;\n    static room = null;\n    \n\n    static async createRoom(roomname, username, password){\n\n        const rand=()=>Math.random(0).toString(36).substr(2);\n        const token=(length)=>(rand()+rand()+rand()+rand()).substr(0,length);   \n\n        console.log(roomname, username, password)\n        await chatroomsDB.add({\n            name: roomname,\n            admin: username,\n            password: password\n          })\n    }\n\n    static async joinroom(userName, roomCode){\n\n        this.room = roomCode\n        user_utils.setUser(userName)\n\n    }\n\n    static async getRoom(roomCode){\n\n        return chatroomsDB.doc(roomCode).get().then((doc) => {\n            if (doc.exists) {\n                console.log(\"Document data:\", doc.data());\n                return doc.data()\n            } else {\n                console.log(\"No such document!\");\n                return \"\"\n            }\n        }).catch((error) => {\n            console.log(\"Error gettingdocument:\", error);\n        });\n\n        \n    }\n\n    static async getMessages(roomCode){\n\n\n        return messagesRef.doc(roomCode).orderBy('createdAt').get().then((doc) => {\n            if (doc.exists) {\n                console.log(\"Document data:\", doc.data());\n                return doc.data()\n            } else {\n                console.log(\"No such document!\");\n                return \"\"\n            }\n        }).catch((error) => {\n            console.log(\"Error gettingdocument:\", error);\n        });\n\n        \n    }\n\n\n}\n\nclass user_utils{\n    static setUser(name, id){\n        this.user = {\n            name: name\n        }\n\n        localStorage.setItem(\"user-name\",name)\n    }\n}\n\nexport {\n    rooms,\n    user_utils,\n    firebase,\n    firestore\n}\n*/","map":{"version":3,"sources":["/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/util.js"],"names":[],"mappingssourcesContent":["\n//FIREBASE CONFIG//\n/*import firebase from 'firebase';\nrequire(\"firebase/firestore\");\n\n\nvar firebaseConfig = {\n    apiKey: process.env.REACT_APP_apiKey,\n    authDomain: process.env.REACT_APP_authDomain,\n    projectId: process.env.REACT_APP_projectId,\n    storageBucket: process.env.REACT_APP_storageBucket,\n    messagingSenderId: process.env.REACT_APP_messagingSenderId,\n    appId: process.env.REACT_APP_appId,\n    measurementId: process.env.REACT_APP_measurementId\n};\n  \nfirebase.initializeApp(firebaseConfig)\n\n//DATABASE INIT\nconst firestore = firebase.firestore();\nconst chatroomsDB= firestore.collection('chatrooms');\nconst messagesRef = firestore.collection('messages');\n\n\n\n//Functional groups\nclass rooms  {\n\n\n    static user = null;\n    static room = null;\n    \n\n    static async createRoom(roomname, username, password){\n\n        const rand=()=>Math.random(0).toString(36).substr(2);\n        const token=(length)=>(rand()+rand()+rand()+rand()).substr(0,length);   \n\n        console.log(roomname, username, password)\n        await chatroomsDB.add({\n            name: roomname,\n            admin: username,\n            password: password\n          })\n    }\n\n    static async joinroom(userName, roomCode){\n\n        this.room = roomCode\n        user_utils.setUser(userName)\n\n    }\n\n    static async getRoom(roomCode){\n\n        return chatroomsDB.doc(roomCode).get().then((doc) => {\n            if (doc.exists) {\n                console.log(\"Document data:\", doc.data());\n                return doc.data()\n            } else {\n                console.log(\"No such document!\");\n                return \"\"\n            }\n        }).catch((error) => {\n            console.log(\"Error gettingdocument:\", error);\n        });\n\n        \n    }\n\n    static async getMessages(roomCode){\n\n\n        return messagesRef.doc(roomCode).orderBy('createdAt').get().then((doc) => {\n            if (doc.exists) {\n                console.log(\"Document data:\", doc.data());\n                return doc.data()\n            } else {\n                console.log(\"No such document!\");\n                return \"\"\n            }\n        }).catch((error) => {\n            console.log(\"Error gettingdocument:\", error);\n        });\n\n        \n    }\n\n\n}\n\nclass user_utils{\n    static setUser(name, id){\n        this.user = {\n            name: name\n        }\n\n        localStorage.setItem(\"user-name\",name)\n    }\n}\n\nexport {\n    rooms,\n    user_utils,\n    firebase,\n    firestore\n}\n*/"]},"metadata":{},"sourceType":"module"}