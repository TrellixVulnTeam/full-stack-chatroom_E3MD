{"ast":null,"code":"var _jsxFileName = \"/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Chatroom/ChatRoom.js\";\nimport './Chatroom.css';\nimport { withRouter } from 'react-router-dom';\nimport React from 'react';\nimport io from 'socket.io-client';\nimport autosize from \"autosize\";\nimport ChatMessage from './ChatMessage';\nimport SocketManager from './Socket';\nimport Message from '../Models/MessageModel';\nimport { FaTelegramPlane } from \"react-icons/fa\";\nimport { Modal, Button } from 'antd';\nimport { UserService } from '../FirebaseUtil/UserService'; // \"bnh5yzdirjinqaorq0ox1tf383nb3xr\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Chat extends React.Component {\n  constructor(props) {\n    super(props);\n    this.socket = null;\n    this.MaxMessageLength = 140;\n\n    if (!props.data.room) {\n      props.history.push(\"/\");\n      return;\n    }\n\n    let room_ = props.data.room; //new Room(\"25\", \"love isalnd ❤️\", \"kit\")//props.data.room\n\n    let user_ = props.data.user; //{userName: props.data.user.userName} //props.data.user_\n\n    let isAdmin_ = room_ ? room_.admin === UserService.token() ? true : false : null; //==\n\n    let token_ = props.data.persistentToken ? props.data.persistentToken : null;\n    console.log(\"token is: \", token_);\n    this.textarea = /*#__PURE__*/_jsxDEV(\"textarea\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 25\n    }, this);\n    this.removeMessage = this.removeMessage.bind(this);\n    this.onAddReaction = this.onAddReaction.bind(this);\n    this.showMessageOptions = this.showMessageOptions.bind(this);\n    this.state = {\n      room: room_,\n      user: user_,\n      isAdmin: isAdmin_,\n      newMessage: \"\",\n      messages: [],\n      status: \"loading\",\n      messageOptionsIsVisible: false\n    }; // if(!this.state.room)this.props.history.push(\"/\")\n\n    console.log(UserService.token(), this.state.room);\n  }\n\n  componentDidMount() {\n    if (!this.props.data.room) {\n      this.props.history.push(\"/\");\n      return;\n    } //if(!this.state.room)this.props.history.push(\"/\")\n\n\n    if (true) {\n      this.connectSocket();\n      this.socketEvents();\n    } //http://localhost:3000/chat?=Yu9uIlEncb8flTfFxv14.focus();\n\n\n    autosize(this.textarea);\n  }\n\n  connectSocket() {\n    this.socket = io(\"http://192.168.1.9:1234\", {\n      transport: ['websocket']\n    });\n  }\n\n  set(field, value) {\n    this.setState({\n      [field]: value\n    });\n  }\n\n  socketEvents() {\n    //socket functions\n    this.socket.on('connect', connection => {\n      if (this.state.isAdmin) {\n        SocketManager.createRoom(this);\n      } else {\n        this.socket.emit('join-room', this.state.room.roomCode, this.props.data.persistentToken);\n      }\n\n      console.log(\"connected.\");\n      this.socket.on('generated-user-token', tkn => {\n        this.props.data.persistentToken = tkn;\n        localStorage.setItem(\"persistentToken\", tkn);\n        console.log(\"new token generated: \", tkn);\n      });\n      this.socket.on('backlog-messages', messages_ => {\n        this.set(\"messages\", messages_);\n        this.set(\"status\", \"loaded\");\n        console.log(\"backlog: \", messages_);\n      });\n      this.socket.on('broadcasted-message', message => {\n        this.set(\"messages\", [...this.state.messages, message]);\n      });\n      this.socket.on('room-ended', () => {\n        console.log(\"room ended. \");\n        this.socket.close();\n        this.detachFromRoom();\n      });\n      this.socket.on('removed-message', messages_ => {\n        this.set(\"messages\", messages_);\n        console.log(\"messages updated: \", messages_);\n      });\n      this.socket.on('update-message', messages_ => {\n        this.set(\"messages\", messages_);\n        console.log(\"messages updated: \", messages_);\n      });\n      this.socket.on('find-and-ban-user', token => {\n        console.log(\"user has been banned.\");\n        console.log(token === this.props.data.persistentToken);\n        console.log(token, this.props.data.persistentToken);\n\n        if (token === this.props.data.persistentToken) {\n          this.detachFromRoom();\n          this.set(\"status\", \"banned\");\n        }\n      });\n    });\n  }\n\n  setValue(setter, event) {\n    this.set(setter, event.target.value);\n  }\n\n  updateNewMessage(event) {\n    console.log(event.target.value, event.target.value.length, event.target.value.substring(0, this.MaxMessageLength));\n    if (event.target.value.length > this.MaxMessageLength) return this.set(\"newMessage\", event.target.value.substring(0, this.MaxMessageLength));\n    this.set(\"newMessage\", event.target.value);\n  }\n\n  sendMessage() {\n    let msg = new Message(this.state.room.roomCode, this.state.newMessage, this.state.user.userName, UserService.token()); //this.socket.emit(\"broadcast-message\", this.state.room.roomCode, this.state.newMessage, this.state.user.userName, this.props.data.persistentToken)\n\n    this.socket.emit(\"broadcast-message\", this.state.room.roomCode, msg);\n    this.set(\"newMessage\", \"\");\n  }\n\n  endRoom() {\n    this.socket.emit(\"end-room\", this.state.room.roomCode);\n    this.detachFromRoom();\n  }\n\n  detachFromRoom() {\n    this.set(\"room\", null);\n    this.socket.close();\n    this.socket = null;\n    this.set(\"status\", \"closed\");\n  }\n\n  leaveRoom() {\n    this.socket.emit(\"leave-room\", this.roomCode);\n    this.detachFromRoom();\n    this.props.history.push(\"/\");\n  }\n\n  removeUser(msg) {}\n\n  exitClosedRoom() {\n    this.props.history.push(\"/\");\n  }\n\n  removeMessage(msg) {\n    alert(\"user will be banned\");\n    console.log(msg, this.state.room.roomCode, msg);\n    this.socket.emit(\"ban-user\", this.state.room.roomCode, msg);\n  }\n\n  onAddReaction(emoji, msg) {\n    this.socket.emit(\"add-reaction\", this.state.room.roomCode, msg, emoji);\n  }\n\n  closeMessageOptions() {\n    this.setState({\n      messageOptionsIsVisible: false\n    });\n  }\n\n  showMessageOptions(msg) {\n    console.log(msg);\n    this.setState({\n      messageOptionsIsVisible: true\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"page-root chatroom-root\",\n      children: this.props.data.room ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" \", this.state.room && this.state.status !== \"closed\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"chatroom-view\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"title-view\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              class: \"title-text\",\n              children: this.state.room.roomName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 21\n            }, this), this.state.room.admin == UserService.token() ? /*#__PURE__*/_jsxDEV(\"span\", {\n              class: \"leave-text\",\n              children: \"end\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 25\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              class: \"leave-text\",\n              children: \"leave\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"chatroom-messages-view\",\n            children: this.state.messages ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: this.state.messages.map(msg => /*#__PURE__*/_jsxDEV(ChatMessage, {\n                onClick: () => this.showMessageOptions(msg),\n                onReportMessage: this.removeMessage,\n                message: msg,\n                text: msg.message,\n                userName: msg.userName,\n                reactions: msg.reactions,\n                onAddReaction: emoji => this.onAddReaction(emoji, msg),\n                isUser: UserService.token() === msg.userToken\n              }, msg.messageID, false, {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 21\n            }, this) : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"typed-message-view\",\n            children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n              class: \"typed-message-input\",\n              ref: c => this.textarea = c,\n              rows: 3,\n              defaultValue: \"\",\n              value: this.state.newMessage,\n              onChange: this.updateNewMessage.bind(this),\n              class: \"typed-message-input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n              class: \"material-icons send-message-btn\",\n              onClick: this.sendMessage.bind(this),\n              children: /*#__PURE__*/_jsxDEV(FaTelegramPlane, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 285,\n                columnNumber: 26\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"character-count\",\n              children: [this.state.newMessage.length, \"/\", this.MaxMessageLength]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 17\n        }, this) : null, this.state.status === \"closed\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            class: \"title-leave-btn\",\n            onClick: this.exitClosedRoom.bind(this),\n            children: \"leave\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \" room is closed.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 13\n        }, this) : null, this.state.status === \"banned\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            class: \"title-leave-btn\",\n            onClick: this.exitClosedRoom.bind(this),\n            children: \"leave\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \" you've been removed.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }, this) : null, /*#__PURE__*/_jsxDEV(Modal, {\n          width: \"80%\",\n          visible: this.state.messageOptionsIsVisible,\n          onCancel: this.closeMessageOptions.bind(this),\n          footer: null,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-info-modal\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              children: \" Remove User\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 34\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default _c = withRouter(Chat);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Chatroom/ChatRoom.js"],"names":["withRouter","React","io","autosize","ChatMessage","SocketManager","Message","FaTelegramPlane","Modal","Button","UserService","Chat","Component","constructor","props","socket","MaxMessageLength","data","room","history","push","room_","user_","user","isAdmin_","admin","token","token_","persistentToken","console","log","textarea","removeMessage","bind","onAddReaction","showMessageOptions","state","isAdmin","newMessage","messages","status","messageOptionsIsVisible","componentDidMount","connectSocket","socketEvents","transport","set","field","value","setState","on","connection","createRoom","emit","roomCode","tkn","localStorage","setItem","messages_","message","close","detachFromRoom","setValue","setter","event","target","updateNewMessage","length","substring","sendMessage","msg","userName","endRoom","leaveRoom","removeUser","exitClosedRoom","alert","emoji","closeMessageOptions","render","roomName","map","reactions","userToken","messageID","c"],"mappings":"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","sourcesContent":["import './Chatroom.css';\nimport { withRouter} from 'react-router-dom';\n\nimport React from 'react';\nimport io from 'socket.io-client';\nimport autosize from \"autosize\";\n\n\n\nimport ChatMessage from './ChatMessage';\nimport SocketManager from './Socket'\nimport Message from '../Models/MessageModel'\n\nimport { FaTelegramPlane } from \"react-icons/fa\";\nimport { Modal, Button } from 'antd';\nimport { UserService } from '../FirebaseUtil/UserService';\n\n\n\n\n\n\n\n// \"bnh5yzdirjinqaorq0ox1tf383nb3xr\"\n\nclass Chat extends React.Component{\n\n\n    constructor(props){\n\n        super(props)\n\n        this.socket = null; \n        this.MaxMessageLength = 140;\n\n\n        if(!props.data.room){\n             props.history.push(\"/\")\n             return\n        }\n\n        let room_ = props.data.room//new Room(\"25\", \"love isalnd ❤️\", \"kit\")//props.data.room\n        let user_ = props.data.user//{userName: props.data.user.userName} //props.data.user_\n        let isAdmin_ = room_ ?  (room_.admin === UserService.token()? true: false):null //==\n        let token_= props.data.persistentToken? props.data.persistentToken: null;\n        console.log(\"token is: \", token_)\n\n        this.textarea = <textarea/>\n        this.removeMessage =this.removeMessage.bind(this)\n        this.onAddReaction = this.onAddReaction.bind(this)\n        this.showMessageOptions = this.showMessageOptions.bind(this)\n\n        this.state ={\n            room: room_,\n            user: user_,\n            isAdmin: isAdmin_,\n            newMessage: \"\",\n            messages: [],\n            status: \"loading\",\n            messageOptionsIsVisible: false\n        }\n\n       // if(!this.state.room)this.props.history.push(\"/\")\n        console.log(UserService.token(), this.state.room)\n        \n    }\n\n    \n    componentDidMount(){\n\n        if(!this.props.data.room){\n            this.props.history.push(\"/\")\n            return\n       }\n\n        //if(!this.state.room)this.props.history.push(\"/\")\n        if(true){\n            this.connectSocket()\n            this.socketEvents()\n        }\n        //http://localhost:3000/chat?=Yu9uIlEncb8flTfFxv14.focus();\n        autosize(this.textarea);\n    }\n\n    connectSocket(){\n        this.socket = io(\"http://192.168.1.9:1234\", { transport: ['websocket']}) ;\n    }\n\n\n    set(field, value){\n        this.setState({[field]: value})\n    }\n\n    socketEvents(){\n\n        \n        //socket functions\n        this.socket.on('connect', (connection) => {\n           \n            if(this.state.isAdmin){\n                SocketManager.createRoom(this)\n            }else{\n                this.socket.emit('join-room', this.state.room.roomCode,  this.props.data.persistentToken)\n            }\n            console.log(\"connected.\")\n\n            this.socket.on('generated-user-token', (tkn) => {\n                this.props.data.persistentToken = tkn;\n                localStorage.setItem(\"persistentToken\", tkn)\n                console.log(\"new token generated: \",tkn)\n            });\n\n\n            this.socket.on('backlog-messages', (messages_) => {\n                this.set(\"messages\",messages_ )\n                this.set(\"status\", \"loaded\")\n                console.log(\"backlog: \", messages_)\n\n            });\n\n            this.socket.on('broadcasted-message', (message) => {\n                this.set(\"messages\", [...this.state.messages,message])\n            });\n\n            this.socket.on('room-ended', () => {\n                console.log(\"room ended. \")\n                this.socket.close()\n                this.detachFromRoom()\n            });\n\n            this.socket.on('removed-message', (messages_) => {\n                this.set(\"messages\",messages_ )\n                console.log(\"messages updated: \", messages_)\n            });\n\n            this.socket.on('update-message', (messages_) => {\n                this.set(\"messages\",messages_ )\n                console.log(\"messages updated: \", messages_)\n            });\n\n            this.socket.on('find-and-ban-user', (token) => {\n                console.log(\"user has been banned.\")\n                console.log(token === this.props.data.persistentToken)\n                console.log(token, this.props.data.persistentToken)\n\n                \n                if(token === this.props.data.persistentToken){\n                    this.detachFromRoom();\n                    this.set(\"status\",\"banned\" )\n\n                }\n            });\n\n        });\n\n   \n\n\n\n    }\n\n    setValue(setter, event){\n        this.set(setter, event.target.value)\n    }\n\n    updateNewMessage(event){\n\n        console.log(event.target.value, event.target.value.length, event.target.value.substring(0,this.MaxMessageLength))\n        if(event.target.value.length>this.MaxMessageLength)return this.set(\"newMessage\" ,event.target.value.substring(0,this.MaxMessageLength))\n        this.set(\"newMessage\" ,event.target.value)\n    }\n\n    sendMessage(){\n        let msg = new Message(this.state.room.roomCode, this.state.newMessage, this.state.user.userName, UserService.token())\n        //this.socket.emit(\"broadcast-message\", this.state.room.roomCode, this.state.newMessage, this.state.user.userName, this.props.data.persistentToken)\n        this.socket.emit(\"broadcast-message\", this.state.room.roomCode, msg)\n        this.set(\"newMessage\", \"\")\n    }\n\n    endRoom(){\n        this.socket.emit(\"end-room\", this.state.room.roomCode)\n        this.detachFromRoom()\n    }\n\n    detachFromRoom(){\n        this.set(\"room\",null)\n        this.socket.close()\n        this.socket = null;\n        this.set(\"status\", \"closed\")\n    }\n\n    leaveRoom(){\n        this.socket.emit(\"leave-room\", this.roomCode)\n        this.detachFromRoom();\n        this.props.history.push(\"/\")\n    }\n\n    removeUser(msg){\n       \n        \n    }\n    \n    exitClosedRoom(){\n        this.props.history.push(\"/\")\n    }\n\n    removeMessage(msg){\n        alert(\"user will be banned\")\n        console.log(msg,  this.state.room.roomCode, msg)\n        this.socket.emit(\"ban-user\", this.state.room.roomCode, msg)\n    }\n\n    onAddReaction(emoji, msg){\n        this.socket.emit(\"add-reaction\", this.state.room.roomCode, msg, emoji)\n    }\n\n    closeMessageOptions(){\n        this.setState({messageOptionsIsVisible: false})\n    }\n\n\n    showMessageOptions(msg){\n        console.log(msg)\n        this.setState({messageOptionsIsVisible: true})\n    }\n\n  \n    render(){\n\n        return (\n            <div class=\"page-root chatroom-root\">\n           {this.props.data.room?<div> {this.state.room && this.state.status !== \"closed\" ?\n                <div class=\"chatroom-view\">\n                \n                <div class=\"title-view\">\n     \n                    <span class=\"title-text\">{this.state.room.roomName}</span>\n                    {/*this.state.isAdmin?\n                        <p class=\"title-leave-btn\"  onClick={this.endRoom.bind(this)}>end room</p>:\n                        <p class=\"title-leave-btn\"  onClick={this.leaveRoom.bind(this)}>leave</p>\n                    */ }\n                   {this.state.room.admin == UserService.token()?\n                        <span class=\"leave-text\">end</span>:\n                        <span class=\"leave-text\">leave</span>\n                   }\n\n        \n                </div>\n              \n                <div class=\"chatroom-messages-view\">\n            \n                    {this.state.messages?\n                    <div>\n                        {this.state.messages.map(msg=> \n                        <ChatMessage \n                            onClick={()=> this.showMessageOptions(msg)} \n                            onReportMessage={this.removeMessage}\n                            message ={msg}\n                            key={msg.messageID} \n                            text={msg.message} \n                            userName={msg.userName } \n                            reactions = {msg.reactions}\n                            onAddReaction={(emoji=>this.onAddReaction(emoji, msg))}\n                            isUser={UserService.token()=== msg.userToken }/>)}\n                    </div>\n                        :null\n                    }\n        \n                    </div>\n\n                    <div class=\"typed-message-view\">\n                    <textarea\n                        class=\"typed-message-input\"\n                        ref={c => (this.textarea = c)}\n                        rows={3}\n                        defaultValue=\"\"\n                        value={this.state.newMessage} \n                        onChange={this.updateNewMessage.bind(this) }\n                        class=\"typed-message-input\"\n                        />\n       \n                     \n                        <i class=\"material-icons send-message-btn\" \n                            onClick={this.sendMessage.bind(this)}\n                        ><FaTelegramPlane/></i>\n                        <span className=\"character-count\">{this.state.newMessage.length}/{this.MaxMessageLength}</span>\n                    </div>\n        \n                </div>\n                :null\n            }\n\n            {this.state.status === \"closed\"?\n            <div>\n                <p class=\"title-leave-btn\"  onClick={this.exitClosedRoom.bind(this)}>leave</p>\n                <p> room is closed.</p>\n            </div>:\n                null\n            }\n\n            {this.state.status === \"banned\"?\n            <div>\n                <p class=\"title-leave-btn\"  onClick={this.exitClosedRoom.bind(this)}>leave</p>\n                <p> you've been removed.</p>\n            </div>:\n                null\n            }\n\n\n            <Modal  width=\"80%\" visible={this.state.messageOptionsIsVisible}  onCancel={this.closeMessageOptions.bind(this)} footer={null}>\n                <div className=\"message-info-modal\">\n                <button > Remove User</button>\n                </div>\n                \n            </Modal>\n\n\n\n\n\n            </div>:null}\n\n            </div>\n\n\n\n\n\n\n        );\n        \n    }\n    \n}\n\nexport default withRouter(Chat);\n"]},"metadata":{},"sourceType":"module"}