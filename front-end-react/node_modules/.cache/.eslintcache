[{"/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/index.js":"1","/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/App.js":"2","/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Chatroom/ChatRoom.js":"3","/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Landing/Landing.js":"4","/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Chatroom/Socket.js":"5","/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Chatroom/ChatMessage.js":"6","/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Landing/JoinRoom.js":"7","/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Landing/LandingPrompt.js":"8","/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Styles/StyleSheet.js":"9","/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Landing/CustomInput.js":"10","/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Landing/CreateAccount.js":"11","/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Models/RoomModel.js":"12","/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Models/UserModel.js":"13","/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Models/MessageModel.js":"14","/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Services/UserService.js":"15","/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Services/FirebaseUtil.js":"16","/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Landing/CreateRoom/CreateRoom.js":"17"},{"size":536,"mtime":1615601816487,"results":"18","hashOfConfig":"19"},{"size":992,"mtime":1615602851174,"results":"20","hashOfConfig":"19"},{"size":13070,"mtime":1615601816506,"results":"21","hashOfConfig":"19"},{"size":1746,"mtime":1615603218407,"results":"22","hashOfConfig":"19"},{"size":265,"mtime":1615601816476,"results":"23","hashOfConfig":"19"},{"size":2946,"mtime":1615602237681,"results":"24","hashOfConfig":"19"},{"size":3355,"mtime":1615601816482,"results":"25","hashOfConfig":"19"},{"size":3466,"mtime":1615491233463,"results":"26","hashOfConfig":"19"},{"size":551,"mtime":1614576018471,"results":"27","hashOfConfig":"19"},{"size":403,"mtime":1614576018456,"results":"28","hashOfConfig":"19"},{"size":2015,"mtime":1614655446668,"results":"29","hashOfConfig":"19"},{"size":533,"mtime":1615421940966,"results":"30","hashOfConfig":"19"},{"size":441,"mtime":1615352976000,"results":"31","hashOfConfig":"19"},{"size":310,"mtime":1615601620494,"results":"32","hashOfConfig":"19"},{"size":1005,"mtime":1615604391716,"results":"33","hashOfConfig":"19"},{"size":3131,"mtime":1615515185491,"results":"34","hashOfConfig":"19"},{"size":3205,"mtime":1615604405697,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1p1iq15",{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"38"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},"/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/index.js",[],["80","81"],"/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/App.js",["82","83"],"import './App.css';\nimport {  useHistory, BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\n\nimport ChatRoom from './Chatroom/ChatRoom'\nimport Landing from './Landing/Landing'\n\n\nfunction App(props) {\n\n  let history = useHistory();\n\n  let data ={\n    user: null,\n    room:null,\n    state: {},\n  }\n  \n  return (\n  <div className=\"App\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"></meta>\n      <link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3pro.css\"></link>\n        \n      <p class=\"app-title\">chatable.io </p>\n      <div className=\"app-body\">\n        \n        <Switch>\n           <Route  path='/cool' component={()=><div>cool</div> }></Route>\n          <Route  path='/chat' component={()=><ChatRoom  data={data}   history={history}  /> }></Route>\n          <Route  path='/' component={()=><Landing   data={data}  history={history}  />} ></Route>\n      </Switch>\n      </div>\n\n  </div>\n\n\n      \n\n  );\n}\n\nexport default App;\n","/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Chatroom/ChatRoom.js",["84","85","86","87","88","89","90","91","92","93","94","95","96","97"],"import './chatroom.css';\nimport { withRouter} from 'react-router-dom';\n\nimport React from 'react';\nimport io from 'socket.io-client';\nimport autosize from \"autosize\";\n\n\n\nimport ChatMessage from './ChatMessage';\nimport SocketManager from './Socket'\nimport Message from '../Models/MessageModel'\n\nimport { FaTelegramPlane, FaWizardsOfTheCoast } from \"react-icons/fa\";\nimport { Modal, Button } from 'antd';\nimport  UserService  from '../Services/UserService.js';\nimport { FirebaseUtil } from '../Services/FirebaseUtil';\nimport User from '../Models/UserModel';\n\n\nclass Chat extends React.Component{\n\n\n    constructor(props){\n\n        super(props)\n\n        this.state = {\n            room: null,\n            user: null,\n            isAdmin: \"\",\n            newMessage: \"\",\n            messages: [],\n            status: \"\",\n            messageOptionsIsVisible: false,\n            render:false\n        }\n\n        ////bind functions\n        this.textarea = <textarea/>\n        this.messagesEnd = <div/>\n        this.showModal = this.showModal.bind(this)\n        this.removeMessage =this.removeMessage.bind(this)\n        this.onAddReaction = this.onAddReaction.bind(this)\n        this.showMessageOptions = this.showMessageOptions.bind(this)\n\n        //other variables\n        this.MaxMessageLength = 140;\n        this.socket = null; \n        this.room = null;\n        \n    }\n\n\n    componentDidMount(){\n\n        //query parameters\n        let queryParams = {}\n        try{\n            let searchString = this.props.history.location.search.substring(1).split('&')\n            let pair = []\n            for(var i=0;i<searchString.length;i++){\n                pair = searchString[i].split('=')\n                queryParams[pair[0]] = pair[1]\n            }\n            //if no room in parameters status 404\n            if(!queryParams.room)  return this.setState({status: \"404\"})\n        }catch(err){\n            //if paramaters not complete status 404\n            console.log(\"query paramater err: \", err)\n            this.setState({render: true})\n            this.setState({status: \"404\"})\n            return\n            \n        }\n\n\n        ( async() => {\n        /////find room\n        let room ;\n        if(this.props.location.state) room = this.props.location.state.room\n        else room = await FirebaseUtil.findRoomById(queryParams.room)\n\n        if(!UserService.userName()){\n            this.props.history.push({\n                pathname: '/joinroom',\n                search: \"\",\n                state: { room: room}\n            })\n\n            return\n        }\n        //if room not found then render a ror page\n        if(!room){\n            this.setState({status: \"404\"})\n            this.setState({render: true})\n            return\n        }\n\n        this.room = room;\n        console.log(UserService.userName())\n        //set state\n        this.setState({\n            room: room,\n            user: {userName: UserService.userName(), userID: UserService.token() },\n            isAdmin: room.adminID == UserService.token(),\n            newMessage: \"\",\n            messages: [],\n            status: \"200\",\n            messageOptionsIsVisible: false,\n            modalVisible: false,\n            modal:{state:\"\"},\n            render:true\n        })\n\n        console.log(\"this room is: \", room)\n\n        //connect sockets\n        this.connectSocket()\n        this.socketEvents()\n\n        autosize(this.textarea);\n\n\n    })()\n\n    }\n\n    queryParameters(){\n        let queryParams = {}\n        let searchString = this.props.history.location.search.substring(1).split('&')\n        let pair = []\n\n        for(var i=0;i<searchString.length;i++){\n            pair = searchString[i].split('=')\n            queryParams[pair[0]] = pair[1]\n        }\n    }\n\n    connectSocket(){\n        this.socket = io(\"http://192.168.1.9:1234\", { transport: ['websocket']}) ;\n    }\n\n\n    set(field, value){\n        this.setState({[field]: value})\n    }\n\n    socketEvents(){\n\n        \n        //socket functions\n        this.socket.on('connect', (connection) => {\n           \n            if(this.state.isAdmin){\n                console.log(UserService.getUserID())\n                SocketManager.createRoom(this)\n            }else{\n                this.socket.emit('join-room', this.room.roomCode,  UserService.getUserID())\n            }\n            console.log(\"connected.\")\n\n            this.socket.on('backlog-messages', (messages_) => {\n                this.set(\"messages\",messages_ )\n                this.set(\"status\", \"200\")\n                console.log(\"backlog: \", messages_)\n\n                \n\n\n            });\n\n            this.socket.on('broadcasted-message', (message) => {\n                console.log(\"received\")\n                this.set(\"messages\", [...this.state.messages,message])\n            });\n\n            this.socket.on('room-ended', () => {\n                console.log(\"room ended. \")\n                this.detachFromRoom()\n                this.set(\"status\", \"exit\")\n            });\n\n            this.socket.on('removed-message', (messages_, userID) => {\n                this.set(\"messages\",messages_ )\n                if(userID == UserService.getUserID()) this.setState({status:\"303\"})\n                console.log(userID)\n                console.log(UserService.getUserID())\n                console.log(userID == UserService.getUserID())\n                console.log(\"messages updated: \", messages_)\n            });\n\n            this.socket.on('update-message', (messages_) => {\n                this.set(\"messages\",messages_ )\n                console.log(\"messages updated: \", messages_)\n            });\n\n\n        });\n\n   \n\n\n\n    }\n\n    setValue(setter, event){\n        this.set(setter, event.target.value)\n    }\n\n    updateNewMessage(event){\n\n        console.log(event.target.value, event.target.value.length, event.target.value.substring(0,this.MaxMessageLength))\n        if(event.target.value.length>this.MaxMessageLength)return this.set(\"newMessage\" ,event.target.value.substring(0,this.MaxMessageLength))\n        this.set(\"newMessage\" ,event.target.value)\n    }\n\n    sendMessage(){\n        let msg = new Message(this.state.room.roomCode, this.state.newMessage, this.state.user.userName, UserService.token())\n        this.socket.emit(\"broadcast-message\", this.state.room.roomCode, msg)\n        this.set(\"newMessage\", \"\")\n    }\n\n    endRoom(){\n        console.log('end')\n        this.socket.emit(\"end-room\", this.state.room.roomCode)\n        this.detachFromRoom()\n        this.setState({status: \"exit\"})\n    }\n\n    detachFromRoom(){\n        //this.set(\"room\",null)\n        this.socket.close()\n        delete this.socket;\n        //this.set(\"status\", \"exit\")\n    }\n\n    leaveRoom(){\n        this.socket.emit(\"leave-room\", this.roomCode)\n        this.detachFromRoom();\n        this.props.history.push(\"/\")\n    }\n\n    removeUser(msg){\n       \n        \n    }\n    \n    exitClosedRoom(){\n        this.props.history.push(\"/\")\n    }\n\n    removeMessage(msg){\n        console.log(\"removing: \", msg,  this.state.room.roomCode, msg)\n        this.socket.emit(\"ban-user\", this.state.room.roomCode, msg)\n    }\n\n    onAddReaction(emoji, msg){\n        this.socket.emit(\"add-reaction\", this.state.room.roomCode, msg, emoji)\n    }\n\n    closeMessageOptions(){\n        this.setState({modalVisible: false})\n        this.setState({modal: {state:\"\"}})\n        this.setState({messageOptionsIsVisible: false})\n    }\n\n\n    showMessageOptions(msg){\n        this.setState({messageOptionsIsVisible: true})\n    }\n\n    scrollToBottom = () => {\n        this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n      }\n    componentDidUpdate(prevState, currState) {\n        //console.log(prevState, currState)\n        if(this.state.render && this.state.status ==\"200\")this.scrollToBottom();\n      }\n\n      showModal(state,data=null){\n          console.log(state)\n          this.setState({modal: {state:state, data:data}})\n          this.setState({modalVisible: true})\n          \n      }\n  \n    render(){\n\n        return (\n            \n            <div class=\"chatroom-root\">\n                {!this.state.render? <div>Loading</div>:null}\n                {(this.state.render && this.state.status==\"404\")? <div>STATUS 404</div>:null}\n                {(this.state.render && this.state.status==\"exit\")? <div>room ended by admin.</div>:null}\n                {(this.state.render && this.state.status==\"303\")? <div>you've been removed from this room.</div>:null}\n\n                {(this.state.render && this.state.status ==\"200\" )?\n        \n                        <div class=\"chatroom-view\">\n                        \n                        <div class=\"title-view\">\n            \n                            <span class=\"title-text\">{this.state.room.roomName}</span>\n                            {/*this.state.isAdmin?\n                                <p class=\"title-leave-btn\"  onClick={this.endRoom.bind(this)}>end room</p>:\n                                <p class=\"title-leave-btn\"  onClick={this.leaveRoom.bind(this)}>leave</p>\n                            */ }\n                        {this.state.isAdmin?\n                                <span onClick={()=>this.showModal(\"end-room\")}class=\"leave-text\">end</span>:\n                                <span onClick={this.leaveRoom.bind(this)} class=\"leave-text\">leave</span>\n                        }\n\n                       \n                        <div className=\"subtitle-view\">\n                            <p className=\"subtitle-text\">code: {this.state.room.roomCode}</p>\n                        </div>\n                    \n                \n                        </div>\n                  \n                        <div class=\"chatroom-messages-view\">\n                    \n                            {this.state.messages?\n                            <div>\n                                {this.state.messages.map(msg=> \n                                <ChatMessage \n                                    onClick={()=> this.showModal(\"ban-user\",msg)} \n                                    onReportMessage={this.removeMessage}\n                                    message ={msg}\n                                    key={msg.messageID} \n                                    text={msg.message} \n                                    userName={msg.userName } \n                                    reactions = {msg.reactions}\n                                    onAddReaction={(emoji=>this.onAddReaction(emoji, msg))}\n                                    isUser={UserService.token()=== msg.userToken }/>)}\n                                       <div style={{ float:\"left\", clear: \"both\" }}\n                                ref={(el) => { this.messagesEnd = el; }}>\n                            </div>\n                            </div>\n                                :null\n                                 }\n                \n                            </div>\n                         \n                        <div class=\"typed-message-view\">\n                            <textarea\n                                class=\"typed-message-input\"\n                                ref={c => (this.textarea = c)}\n                                rows={3}\n                                defaultValue=\"\"\n                                value={this.state.newMessage} \n                                onChange={this.updateNewMessage.bind(this) }\n                                class=\"typed-message-input\"\n                                />\n            \n                            \n                                <i class=\"material-icons send-message-btn\" \n                                    onClick={this.sendMessage.bind(this)}\n                                ><FaTelegramPlane/></i>\n                                <span className=\"character-count\">{this.state.newMessage.length}/{this.MaxMessageLength}</span>\n                            </div>\n                \n                        <Modal  width=\"80%\" visible={this.state.modalVisible}  onCancel={this.closeMessageOptions.bind(this)} footer={null}>\n                            <div className=\"message-info-modal\">\n                                {this.state.modal.state == \"end-room\"?\n                                    <div>\n                                        Are you sure you want to end room? All members will be kicked out.\n                                        <button onClick={this.endRoom.bind(this)}> End Room</button>\n\n                                    </div>:null\n                                }\n\n                                {this.state.modal.state == \"ban-user\"?\n                                    <div>\n                                    <button onClick={()=>this.removeMessage(this.state.modal.data)}> Remove User</button>\n                                    </div>:null\n                                }\n                            </div>\n                        \n                        </Modal>\n\n           \n                        </div>\n                      \n\n                    :null\n                }\n\n            </div>\n\n\n\n\n\n\n        );\n\n        \n    }\n    \n}\n\nexport default withRouter(Chat);\n","/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Landing/Landing.js",["98","99","100","101","102","103","104","105"],"import { Redirect, BrowserRouter as Router, Route, Switch, withRouter, useLocation, Link} from 'react-router-dom';\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport{ useState} from 'react';\n\nimport React from 'react';\n\n\nimport LandingPrompt from './LandingPrompt'\nimport CreateRoom from './CreateRoom/CreateRoom'\nimport JoinRoom from './JoinRoom'\n\nimport '../Styles/root-themes.css';\nimport './Landing.css';\n\nfunction Landing(props) {\n  console.log(props.history.location )\n\n\n  //const [UserService, setUserService] = useState(props.UserService)\n\n  let location = useLocation();\n\n  console.log(location)\n\n  return (\n    <div class=\"landing-root\">\n\n\n          <div className=\"landing-root-header\">\n            <Link className={\"nav \"+(location.pathname ==\"/joinroom\"? \"active\":\"\")} to=\"/joinroom\" >Join </Link>\n            <Link className={\"nav \"+(location.pathname ==\"/createroom\"? \"active\":\"\")} to=\"/createroom\">Create</Link>\n          </div>\n      \n  \n\n            <div className=\"landing-content\">\n\n            <Switch >\n\n                <Route path='/joinroom' component={()=> <JoinRoom history={props.history} {...props}  />}></Route>\n                <Route path='/createroom' component={()=> <CreateRoom  {...props} history={props.history}  {...props} />}></Route>\n                <Route path='*' component={()=> <JoinRoom history={props.history} {...props}  />}></Route>\n                {/*<Route exact path='/' component={()=> <LandingPrompt {...props} history={props.history} />}></Route>\n                <Route path='*' component={()=> <LandingPrompt {...props} history={props.history} />}></Route>*/}\n            </Switch>\n            </div>\n\n\n\n \n\n    </div>\n\n  );\n}\n\n\nexport default withRouter(Landing);\n","/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Chatroom/Socket.js",[],"/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Chatroom/ChatMessage.js",["106","107","108","109","110"],"\nimport './ChatMessage.css';\nimport { FaGrin, FaExclamationCircle } from \"react-icons/fa\";\nimport{ useState} from 'react';\n\n\n\nfunction ChatMessage(props) {\n\n  const [showReactions, setShowReactions] = useState(false)\n  const reactionOptions = ['❤️', '😂', '🥴']\n\n\n  function onToggleReactions(){\n    setShowReactions(!showReactions)\n  }\n\n  function countEmoji(emoji){\n      let list = props.reactions.filter(obj => obj.emoji == emoji)\n      if(list)return list.length\n      else return 0\n  }\n\n\n  function reacted( tkn ){\n    let react = props.reactions.find(obj => obj.by == tkn)\n    if(react) return react.emoji\n    else return false\n  }\n\n\n\n\n  return (\n      \n    <div className={\"chat-message-view \"+ (props.isUser?\"user\":\" \")}>\n\n            <div className=\"chat-message-text-view\">\n              <div className=\"header\">\n                <p class=\"username-text\"  onClick={props.onClick}>{props.userName}</p> \n                {/*!props.isUser?<FaGrin  className=\"show-reaction-button\" onClick={onToggleReactions} ></FaGrin>:null*/}\n\n                <div class={\"reaction-options \"+ (showReactions?\"cshow\":\"chide\")}>\n                      {   reactionOptions.map(\n                                emoji =>{\n                                    let code = emoji\n                                    return(\n                                      <span key={emoji} onClick={()=>{props.onAddReaction(emoji); onToggleReactions()}} className=\"option\">\n                                        {code}\n                                      </span> \n                                    )\n                                }\n                          )}\n                  </div>\n\n\n                <div class={\"username-text reaction-bar \"}>\n                      {reactionOptions.map((emoji)=>{\n                      let count = countEmoji(emoji)\n                      if(count > 0)return(\n                  \n                            <span class={\"reaction-tracking\"} key={emoji}>\n                              <span class={\"reaction-emoji\"}>{count> 0? emoji: \"\"}</span>\n                            <span class={\"reaction-count\"} >{count}</span>\n                          </span>\n                      )\n                    })\n                  }\n              </div>\n              </div>\n              \n              <p className={\"chat-message-text \"+ (props.isUser?\"user\":\" \")}>\n                  {props.text}\n              </p>\n  \n        </div>\n\n        <div className=\"options-left-view\">\n        {!props.isUser?<FaGrin  className=\"\" onClick={onToggleReactions} ></FaGrin>:null}\n\n        </div>\n\n        \n        \n      \n\n\n\n\n\n    </div>\n    );\n}\n\nexport default ChatMessage;\n\n\n/*\n\n  function readEmoji(emoji){\n    if(emoji[0] != '&')return emoji\n    let pair = emoji.substring(1).split('&');\n    return pair\n  }\n\n\n  //if(emoji[0] != '&')code = String.fromCodePoint(emoji)\n  //else code = String.fromCodePoint.apply(String, readEmoji(emoji))\n\n*/","/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Landing/JoinRoom.js",["111","112","113","114","115","116","117","118"],"import React, { useState,  useEffect} from 'react';\nimport { Modal, Button, message } from 'antd';\nimport { withRouter} from 'react-router-dom';\n\n//custom imports\nimport {FirebaseUtil} from '../Services/FirebaseUtil';\nimport UserService from '../Services/UserService.js';\n\n\nimport styleSheet from '../Styles/StyleSheet'\nimport './JoinRoom.css';\nimport '../Styles/root-themes.css';\n\nimport CustomInput from './CustomInput'\n\nimport io from 'socket.io-client';\n\n\n\n\nfunction JoinRoom(props) {\n\n    const [roomCode, setRoomCode] = useState(\"\")\n    const [userName, setUserName] = useState(\"\")\n    //const [UserService, setUserService] = useState(props.UserService)\n    const [preRoomModalVisible, setPreRoomModalVisible] = useState(false);\n\n       \n    useEffect(() => {\n      if(props.location.state){\n        console.log(props.location.state)\n        if(props.location.state.room){\n          console.log(props.location.state.room)\n          setRoomCode(props.location.state.room.roomCode)\n        }\n      }\n      //register user\n\n\n  }, []);\n  \n\n    function setValue(setter, event){\n        setter(event.target.value)\n        console.log(roomCode)\n    }\n\n    const showPreRoomModal = () => {\n      setPreRoomModalVisible(true);\n    };\n\n    \n\n\n    async function onJoinRoom(){\n\n     //check availability\n     if(!userName){\n       message.error(\"please enter a user name.\");\n       return\n     }\n\n      console.log(props.history)\n      let socket = io(\"http://192.168.1.9:1234\", { transport: ['websocket']}) ;\n\n      //create user profile\n      let userID  = \"123\"//await FirebaseUtil.getUserToken();\n      let user = {userName: userName, userID: userID}\n      UserService.login(user)\n      props.data.user = user\n\n\n\n      socket.on('connect', (connection) => {\n\n        //see if room exists\n        socket.emit('find-room', roomCode, UserService.getUserID())\n\n        //if room does not exist\n        socket.on(\"user-is-banned\", () => {\n          console.log('user-is-banned')\n          message.error(\"You've been blocked from this room.\");\n\n          //TODO: alert\n          return\n        })\n\n\n      \n\n        socket.on('room-not-found', () => {\n          //TODO: alert\n\n            message.error(\"room does not exist or is closed.\");\n\n          return\n        })\n\n\n        //if room exists\n        socket.on('room-found', (room) => {\n          props.data.user = {userName: userName};\n          props.data.room = room;\n          props.history.push(\"/chat?room=\"+room.roomID)\n          //props.pushHistory(\"/chat?code=\"+roomCode)\n\n        })\n\n      })\n\n    }\n\n  return (\n    <div class=\"join-room-root\">\n\n\n      <div class=\"join-room-view\">\n\n        <h1 className=\"\">Join A Room.</h1>\n\n\n\n            <CustomInput\n                title=\"Enter room code.\"\n                placeholder=\"placeholder...\"\n                onChange={(event) => setValue(setRoomCode, event)}\n                value={roomCode}\n            />\n            <CustomInput\n                title=\"Create a username.\"\n                placeholder=\"placeholder...\"\n                onChange={(event) => setValue(setUserName, event)}\n                value={userName}\n            />\n\n            \n\n\n\n      <button class=\"root-theme-button-sm join-room-button\" onClick={()=>onJoinRoom()}>\n                join\n        </button>\n\n\n\n\n      </div>\n\n\n      \n    </div>\n\n  );\n}\n\nexport default JoinRoom;\n","/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Landing/LandingPrompt.js",["119","120","121","122","123","124"],"import React, { useEffect, useState} from 'react';\nimport { withRouter } from \"react-router\";\nimport { Link, useLocation, useHistory} from 'react-router-dom';\n\nimport \"antd/dist/antd.css\";\nimport '../App.css';\n\n\n// import styleSheet from '../Styles/StyleSheet'\nimport JoinRoom from './JoinRoom'\nimport CreateAccount from './CreateAccount'\n//import CustomInput from './CustomInput'\n\nimport Room from '../Models/RoomModel'\nimport io from 'socket.io-client';\n\nimport '../Styles/root-themes.css';\nimport './Landing.css';\nimport './LandingPrompts.css';\n\n\nfunction LandingPrompt(props) {\n\n\n  const location = useLocation();\n  const history = useHistory();\n\n  const [createAccountDrawerVisible, setCreateAccountDrawerVisible] = useState(false);\n  \n\n\n  const onCreateAccount = () => {\n    console.log(\"clicked\")\n    setCreateAccountDrawerVisible(true);\n  };\n\n  const closeCreateAccountDrawer = () => {\n\n    setCreateAccountDrawerVisible(false);\n\n  };\n\n\n\n  function onCreateRoom(){\n\n    props.history.push(\"/createroom\")\n    console.log(history)\n    //history.push(\"/createroom\")\n    /*//Create room object //create user object\n    let room = new Room(25, \"roomName\", \"admin\")\n    let user = {userName: \"admin\"}\n    //update props\n    props.data.user = user\n    props.data.room = room;\n    \n    //change pages\n    console.log(props.data.room)\n    props.history.push(\"/chat?=\"+\"25\")\n    //props.history.push(\"/createroom\")*/\n\n\n  }\n\n  function reset(){\n    localStorage.clear()\n  }\n  function onJoinRoom(){\n\n    props.history.push(\"/joinroom\")\n\n   /* let roomCode =\"25\"\n    let userName =\"user\"\n     \n    console.log(props.history)\n    let socket = io(\"http://192.168.1.9:3000\", { transport: ['websocket']}) ;\n\n    socket.on('connect', (connection) => {\n\n      //see if room exists\n      socket.emit('find-room', roomCode)\n\n      //if room does not exist\n      socket.on('user-is-banned', () => {\n        console.log('user-is-banned')\n        //TODO: alert\n        return\n      })\n\n      socket.on('room-not-found', () => {\n        //TODO: alert\n        return\n      })\n\n\n      //if room exists\n      socket.on('room-found', (room) => {\n        props.data.user = {userName: userName};\n        props.data.room = room;\n        props.history.push(\"/chat?code=\"+roomCode)\n        //props.pushHistory(\"/chat?code=\"+roomCode)\n\n      })\n\n    })*/\n\n  }\n\n\n  return (\n      <div className=\"landing-prompts-root\">\n          <div class=\"login-options-view\">\n\n          <div className=\"landing-header\">\n            <button onClick={onCreateAccount} className=\"root-theme-button-sm root-theme-bg-dark-blue register-button\">create account</button>\n          </div>\n\n      \n\n          <div class=\"login-options-view\">\n          <button  \n              className=\"root-theme-button-med prompt-btn\"\n              onClick= {onJoinRoom} \n            > \n              Join Room\n            </button>\n            <button  \n              className=\"root-theme-button-med prompt-btn\"\n              onClick= {onCreateRoom} \n            > \n              Create Room\n            </button>\n            <button onClick={reset}>reset</button>\n\n            <div className=\"landing-footer\">\n            </div>\n\n          \n          </div>\n       \n      </div>\n\n      <CreateAccount visible={createAccountDrawerVisible} onClose={closeCreateAccountDrawer} ></CreateAccount>\n\n\n\n    </div>\n\n\n  );\n}\n\nexport default withRouter(LandingPrompt);\n\n\n/*\n\n <button onClick= {()=> removeToken()}>remove token</button>\n\n */","/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Styles/StyleSheet.js",[],"/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Landing/CustomInput.js",[],"/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Landing/CreateAccount.js",["125","126","127","128","129","130"],"import React, { useState} from 'react';\n\nimport '../Styles/root-themes.css';\n\nimport { Drawer, message} from 'antd';\nimport CustomInput from './CustomInput'\n\n\n\nfunction CreateRoom(props) {\n\n    const [userName, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [number, setNumber] = useState(\"\");\n    const [accessCode, setAccessCode] = useState(\"\");\n\n\n\n    function set(setter, value){\n        setter(value)\n    }\n\n    function onCreateAccount(){\n\n    }\n\n    const error = (msg) => {\n        message.error(msg);\n      };\n\n\n  return (\n    <div>\n\n<Drawer \n        closable={true} \n        onClose={props.onClose}\n        title=\"\" \n        footer={null} \n        visible={props.visible}\n        getContainer={true}\n        style={{ position: 'absolute' }}\n        placement=\"bottom\"\n        height=\"700\"\n\n        >\n          <h1>Create account.</h1>\n          \n          <CustomInput\n                title=\"Username.\"\n                placeholder=\"enter username\"\n                onChange={(event)=>setUsername(event.target.value)}\n                value={null}\n            />\n            <CustomInput\n                title=\"Password.\"\n                placeholder=\"enter password.\"\n                onChange={(event)=>setPassword(event.target.value)}\n                value={null}\n            />\n            <CustomInput\n                title=\"Number.\"\n                placeholder=\"enter number.\"\n                onChange={(event)=>setNumber(event.target.value)}\n                value={null}\n            />\n            <CustomInput\n                title=\"Access Code.\"\n                placeholder=\"access code..\"\n                onChange={(event)=>setAccessCode(event.target.value)}\n                value={null}\n            />\n            <button \n                className=\"root-theme-push-top\" \n                onClick={onCreateAccount}\n            >\n              Create account.\n            </button>\n      </Drawer>\n\n\n      \n\n \n\n    </div>\n\n  );\n}\n\n\nexport default CreateRoom;\n","/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Models/RoomModel.js",[],"/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Models/UserModel.js",[],"/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Models/MessageModel.js",[],"/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Services/UserService.js",[],"/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Services/FirebaseUtil.js",["131","132","133"],"\n//FIREBASE CONFIG//\nimport firebase from 'firebase';\nimport 'firebase/firestore';\nimport UserService from './UserService.js'\n\n\nvar firebaseConfig = {\n    apiKey: process.env.REACT_APP_apiKey,\n    authDomain: process.env.REACT_APP_authDomain,\n    projectId: process.env.REACT_APP_projectId,\n    storageBucket: process.env.REACT_APP_storageBucket,\n    messagingSenderId: process.env.REACT_APP_messagingSenderId,\n    appId: process.env.REACT_APP_appId,\n    measurementId: process.env.REACT_APP_measurementId\n};\n  \nfirebase.initializeApp(firebaseConfig)\n\n\n//DATABASE INIT\nconst firestore = firebase.firestore();\nvar database = firebase.database();\n\nconst chatroomsDB = firestore.collection('chatrooms');\nconst usersDB = firestore.collection('users');\n//const messagesRef = firestore.collection('messages');\n\n\n//Functional groups\nclass FirebaseUtil  {\n\n     static async getUserToken(){\n\n          if(!UserService.getUserID()){\n  \n              let userID = await usersDB.add({\n                  name: \"none\",\n                  type: \"annon\"\n              }).then(res =>{\n                  UserService.setUserID(res.id)\n                  //localStorage.setItem(\"user-token\", res.id)\n                  console.log(\"generating new profile: \", res.id)\n                  return res.id\n              })\n              return userID\n\n          }else{\n                console.log(\"returning user: \",UserService.getUserID())\n                return UserService.getUserID();\n          }\n    }\n    \n    static async findRoomById(roomID){\n\n        let room;\n        console.log(roomID)\n        await chatroomsDB.doc(roomID).get().then((doc) => {\n\n            console.log(doc)\n            if(doc){\n                 room =doc.data()\n                 room.roomID = doc.id\n            }\n        })\n\n        console.log(room)\n\n        return room\n        \n    }\n    static async createRoom( roomName, adminID){\n\n        let code = stringGen(6);\n        chatroomsDB.get().then((querySnapshot) => {\n\n            let duplicatedCode = true;\n            do{\n                code = stringGen(6);\n                //querySnapshot.docs.forEach(doc => null)\n                duplicatedCode = querySnapshot.docs.find(doc => (doc.data()).code == code)\n                console.log(\"code is: \",code)\n            }while(duplicatedCode)\n\n            console.log(\"code is not duplicated: \",code)\n\n        }).catch((error) => {\n                console.log(\"Error getting documents: \", error);\n        })\n\n        let room = {\n            adminID: adminID,\n            roomName: roomName,\n            roomCode: code,\n            type: \"temporary\",\n            timeStamp: \"\"//firestore.FieldValue.serverTimestamp()\n        }\n\n        await chatroomsDB.add(room).then(doc => room.roomID = doc.id)\n\n        return room\n        //return apiCompletionPromise\n          \n        \n\n      \n\n  }\n\n\n\n}\n\n\nexport {\n    FirebaseUtil\n}\n\nfunction stringGen(len) {\n    var text = \"\";\n    \n    var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n    \n    for (var i = 0; i < len; i++)\n        text += charset.charAt(Math.floor(Math.random() * charset.length));\n    \n    return text;\n    }","/Users/kitan/Documents/CODING/Long-term-projects/group-chat-react-project/group-chat-react/src/Landing/CreateRoom/CreateRoom.js",["134","135","136","137","138"],"\n//STYLE SHEETS\nimport './CreateRoom.css';\nimport '../../Styles/root-themes.css';\nimport styleSheet from '../../Styles/StyleSheet'\n\n//Third-party imports\nimport React, { useState,  useEffect} from 'react';\nimport { message} from 'antd';\nimport { withRouter } from \"react-router\";\n\n\n//custom imports\nimport {FirebaseUtil} from '../../Services/FirebaseUtil';\nimport UserService from '../../Services/UserService.js';\n\nimport CustomInput from '../CustomInput'\nimport User from '../../Models/UserModel'\nimport Room from '../../Models/RoomModel'\n\n\nfunction CreateRoom(props) {\n\n    //info for user sign up\n    const [roomName, setRoomName] = useState(\"\")\n    const [userName, setUserName] = useState(\"\")\n    //const [UserService, setUserService] = useState(props.UserService)\n\n    //const [roomCode, setRoomCode] = useState(\"\")\n\n    \n    useEffect( async () => {\n\n        //register user\n\n\n    }, []);\n\n\n    ////FUNCTIONS////\n    ////////////////\n    function setValue(setter, event){\n        setter(event.target.value)\n    }\n\n    async function onCreateRoom(){\n\n\n      //validate user form\n      if(!userName){\n        message.error(\"please enter a user name.\");\n        return\n      }\n\n      //create user profile\n      let userID  = await FirebaseUtil.getUserToken();\n      let user = {userName: userName, userID: userID}\n\n      UserService.login(user)\n      props.data.user = user\n      \n      //create a room\n      let room = await FirebaseUtil.createRoom( roomName, UserService.getUserID())\n\n      //go to chatroom\n      props.history.push({\n        pathname: '/chat',\n        search: \"?room=\"+room.roomID,\n        state: { create:true, room: room, user: user }\n      })\n    \n    }\n  return (\n    <div className=\"create-room-root\">\n\n\n      <div className=\"create-room-view\">\n      <h1 className=\"\">Create A Room.</h1>\n\n            <CustomInput\n                title=\"Name Your Room\"\n                placeholder=\"placeholder...\"\n                onChange={(event) => setValue(setRoomName, event)}\n                value={roomName}\n            />\n\n            <CustomInput\n                title=\"Create a username.\"\n                placeholder=\"placeholder...\"\n                onChange={(event) => setValue(setUserName, event)}\n                value={userName}\n            />\n\n            <button \n              onClick={onCreateRoom} \n              className=\"root-theme-button-sm join-room-button\"\n            > create\n            </button>\n\n      </div>\n      \n    </div>\n\n  );\n}\n\nexport default CreateRoom;\n\n\n/*\n\n  //open up connection to set up room\n      let socket_ = io(\"http://192.168.1.9:3000\", { transport: ['websocket']}) ;\n\n      //save connection\n      setSocket(socket_)\n\n      //once connected....\n      socket_.on('connect', (connection) => {\n        console.log(\"connected.\")\n        //get a code for the room\n        socket_.emit('generate-code')\n        socket_.on('generated-code', (code) => {\n          setRoomCode(code)\n        })\n\n      })\n\n\n         <CustomInput\n                title=\"Create an admin password.\"\n                placeholder=\"placeholder...\"\n                onChange={(event) => setValue(setPassword, event)}\n                value={password}\n            />\n\n\n\n      */",{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","severity":1,"message":"144","line":2,"column":40,"nodeType":"145","messageId":"146","endLine":2,"endColumn":46},{"ruleId":"143","severity":1,"message":"147","line":2,"column":63,"nodeType":"145","messageId":"146","endLine":2,"endColumn":67},{"ruleId":"143","severity":1,"message":"148","line":15,"column":17,"nodeType":"145","messageId":"146","endLine":15,"endColumn":23},{"ruleId":"143","severity":1,"message":"149","line":18,"column":8,"nodeType":"145","messageId":"146","endLine":18,"endColumn":12},{"ruleId":"150","severity":1,"message":"151","line":96,"column":35,"nodeType":"152","messageId":"153","endLine":96,"endColumn":37},{"ruleId":"150","severity":1,"message":"151","line":183,"column":27,"nodeType":"152","messageId":"153","endLine":183,"endColumn":29},{"ruleId":"150","severity":1,"message":"151","line":186,"column":36,"nodeType":"152","messageId":"153","endLine":186,"endColumn":38},{"ruleId":"150","severity":1,"message":"151","line":288,"column":51,"nodeType":"152","messageId":"153","endLine":288,"endColumn":53},{"ruleId":"150","severity":1,"message":"151","line":304,"column":57,"nodeType":"152","messageId":"153","endLine":304,"endColumn":59},{"ruleId":"150","severity":1,"message":"151","line":305,"column":57,"nodeType":"152","messageId":"153","endLine":305,"endColumn":59},{"ruleId":"150","severity":1,"message":"151","line":306,"column":57,"nodeType":"152","messageId":"153","endLine":306,"endColumn":59},{"ruleId":"150","severity":1,"message":"151","line":308,"column":58,"nodeType":"152","messageId":"153","endLine":308,"endColumn":60},{"ruleId":"150","severity":1,"message":"154","line":309,"column":65,"nodeType":"152","messageId":"153","endLine":309,"endColumn":67},{"ruleId":"155","severity":1,"message":"156","line":360,"column":33,"nodeType":"157","endLine":360,"endColumn":60},{"ruleId":"150","severity":1,"message":"151","line":393,"column":49,"nodeType":"152","messageId":"153","endLine":393,"endColumn":51},{"ruleId":"150","severity":1,"message":"151","line":401,"column":49,"nodeType":"152","messageId":"153","endLine":401,"endColumn":51},{"ruleId":"143","severity":1,"message":"158","line":1,"column":10,"nodeType":"145","messageId":"146","endLine":1,"endColumn":18},{"ruleId":"143","severity":1,"message":"144","line":1,"column":37,"nodeType":"145","messageId":"146","endLine":1,"endColumn":43},{"ruleId":"143","severity":1,"message":"159","line":2,"column":10,"nodeType":"145","messageId":"146","endLine":2,"endColumn":25},{"ruleId":"143","severity":1,"message":"160","line":2,"column":27,"nodeType":"145","messageId":"146","endLine":2,"endColumn":40},{"ruleId":"143","severity":1,"message":"161","line":3,"column":9,"nodeType":"145","messageId":"146","endLine":3,"endColumn":17},{"ruleId":"143","severity":1,"message":"162","line":8,"column":8,"nodeType":"145","messageId":"146","endLine":8,"endColumn":21},{"ruleId":"150","severity":1,"message":"151","line":30,"column":56,"nodeType":"152","messageId":"153","endLine":30,"endColumn":58},{"ruleId":"150","severity":1,"message":"151","line":31,"column":56,"nodeType":"152","messageId":"153","endLine":31,"endColumn":58},{"ruleId":"143","severity":1,"message":"163","line":3,"column":18,"nodeType":"145","messageId":"146","endLine":3,"endColumn":37},{"ruleId":"150","severity":1,"message":"151","line":19,"column":58,"nodeType":"152","messageId":"153","endLine":19,"endColumn":60},{"ruleId":"143","severity":1,"message":"164","line":25,"column":12,"nodeType":"145","messageId":"146","endLine":25,"endColumn":19},{"ruleId":"150","severity":1,"message":"151","line":26,"column":52,"nodeType":"152","messageId":"153","endLine":26,"endColumn":54},{"ruleId":"165","severity":1,"message":"166","line":58,"column":51,"nodeType":"167","messageId":"168","endLine":58,"endColumn":53},{"ruleId":"143","severity":1,"message":"169","line":1,"column":28,"nodeType":"145","messageId":"146","endLine":1,"endColumn":37},{"ruleId":"143","severity":1,"message":"170","line":2,"column":10,"nodeType":"145","messageId":"146","endLine":2,"endColumn":15},{"ruleId":"143","severity":1,"message":"148","line":2,"column":17,"nodeType":"145","messageId":"146","endLine":2,"endColumn":23},{"ruleId":"143","severity":1,"message":"171","line":3,"column":10,"nodeType":"145","messageId":"146","endLine":3,"endColumn":20},{"ruleId":"143","severity":1,"message":"172","line":6,"column":9,"nodeType":"145","messageId":"146","endLine":6,"endColumn":21},{"ruleId":"143","severity":1,"message":"173","line":10,"column":8,"nodeType":"145","messageId":"146","endLine":10,"endColumn":18},{"ruleId":"143","severity":1,"message":"174","line":25,"column":12,"nodeType":"145","messageId":"146","endLine":25,"endColumn":31},{"ruleId":"143","severity":1,"message":"175","line":33,"column":11,"nodeType":"145","messageId":"146","endLine":33,"endColumn":27},{"ruleId":"143","severity":1,"message":"169","line":1,"column":17,"nodeType":"145","messageId":"146","endLine":1,"endColumn":26},{"ruleId":"143","severity":1,"message":"147","line":3,"column":10,"nodeType":"145","messageId":"146","endLine":3,"endColumn":14},{"ruleId":"143","severity":1,"message":"176","line":10,"column":8,"nodeType":"145","messageId":"146","endLine":10,"endColumn":16},{"ruleId":"143","severity":1,"message":"177","line":14,"column":8,"nodeType":"145","messageId":"146","endLine":14,"endColumn":12},{"ruleId":"143","severity":1,"message":"178","line":15,"column":8,"nodeType":"145","messageId":"146","endLine":15,"endColumn":10},{"ruleId":"143","severity":1,"message":"179","line":25,"column":9,"nodeType":"145","messageId":"146","endLine":25,"endColumn":17},{"ruleId":"143","severity":1,"message":"180","line":12,"column":12,"nodeType":"145","messageId":"146","endLine":12,"endColumn":20},{"ruleId":"143","severity":1,"message":"181","line":13,"column":12,"nodeType":"145","messageId":"146","endLine":13,"endColumn":20},{"ruleId":"143","severity":1,"message":"182","line":14,"column":12,"nodeType":"145","messageId":"146","endLine":14,"endColumn":18},{"ruleId":"143","severity":1,"message":"183","line":15,"column":12,"nodeType":"145","messageId":"146","endLine":15,"endColumn":22},{"ruleId":"143","severity":1,"message":"184","line":19,"column":14,"nodeType":"145","messageId":"146","endLine":19,"endColumn":17},{"ruleId":"143","severity":1,"message":"185","line":27,"column":11,"nodeType":"145","messageId":"146","endLine":27,"endColumn":16},{"ruleId":"143","severity":1,"message":"186","line":23,"column":5,"nodeType":"145","messageId":"146","endLine":23,"endColumn":13},{"ruleId":"187","severity":1,"message":"188","line":81,"column":58,"nodeType":"167","messageId":"189","endLine":81,"endColumn":90},{"ruleId":"150","severity":1,"message":"151","line":81,"column":83,"nodeType":"152","messageId":"153","endLine":81,"endColumn":85},{"ruleId":"143","severity":1,"message":"173","line":5,"column":8,"nodeType":"145","messageId":"146","endLine":5,"endColumn":18},{"ruleId":"143","severity":1,"message":"171","line":10,"column":10,"nodeType":"145","messageId":"146","endLine":10,"endColumn":20},{"ruleId":"143","severity":1,"message":"149","line":18,"column":8,"nodeType":"145","messageId":"146","endLine":18,"endColumn":12},{"ruleId":"143","severity":1,"message":"177","line":19,"column":8,"nodeType":"145","messageId":"146","endLine":19,"endColumn":12},{"ruleId":"190","severity":1,"message":"191","line":32,"column":16,"nodeType":"167","endLine":37,"endColumn":6},"no-native-reassign",["192"],"no-negated-in-lhs",["193"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Button' is defined but never used.","'User' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Redirect' is defined but never used.","'TransitionGroup' is defined but never used.","'CSSTransition' is defined but never used.","'useState' is defined but never used.","'LandingPrompt' is defined but never used.","'FaExclamationCircle' is defined but never used.","'reacted' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'useEffect' is defined but never used.","'Modal' is defined but never used.","'withRouter' is defined but never used.","'FirebaseUtil' is defined but never used.","'styleSheet' is defined but never used.","'preRoomModalVisible' is assigned a value but never used.","'showPreRoomModal' is assigned a value but never used.","'JoinRoom' is defined but never used.","'Room' is defined but never used.","'io' is defined but never used.","'location' is assigned a value but never used.","'userName' is assigned a value but never used.","'password' is assigned a value but never used.","'number' is assigned a value but never used.","'accessCode' is assigned a value but never used.","'set' is defined but never used.","'error' is assigned a value but never used.","'database' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'code'.","unsafeRefs","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","no-global-assign","no-unsafe-negation"]